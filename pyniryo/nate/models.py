# generated by datamodel-codegen:
#   filename:  openapi.yml
#   timestamp: 2025-03-27T16:33:10+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field, RootModel


class Joints(RootModel[List[float]]):
    root: List[float] = Field(
        ...,
        description='The number of joints should be equal to the number of joints of the robot',
        examples=[[0.0, 1.25, 0.0, 0.0, 0.0, 0.0]],
    )


class Point(BaseModel):
    x: Optional[float] = None
    y: Optional[float] = None
    z: Optional[float] = None


class Quaternion(BaseModel):
    x: Optional[float] = None
    y: Optional[float] = None
    z: Optional[float] = None
    w: Optional[float] = None


class Pose(BaseModel):
    position: Optional[Point] = None
    orientation: Optional[Quaternion] = None


class Type(Enum):
    python = 'python'
    blockly = 'blockly'


class Program(BaseModel):
    id: Optional[str] = None
    type: Optional[Type] = None
    file: Optional[bytes] = None


class Status(Enum):
    running = 'running'
    paused = 'paused'
    stopped = 'stopped'
    completed = 'completed'
    failed = 'failed'


class ProgramExecution(BaseModel):
    id: Optional[str] = None
    status: Optional[Status] = None
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None


class Value(Enum):
    HIGH = 'HIGH'
    LOW = 'LOW'


class DigitalIO(BaseModel):
    id: Optional[str] = Field(
        None, description='The unique identifier of the digital input/output.'
    )
    value: Optional[Value] = Field(
        None, description='The value of the digital input/output.'
    )


class AnalogIO(BaseModel):
    id: Optional[str] = Field(
        None, description='The identifier of the analog input/output.'
    )
    value: Optional[float] = Field(
        None, description='The value of the analog input/output, in volts.'
    )


class Login(BaseModel):
    email: EmailStr
    password: str
    expires_at: Optional[datetime] = None


class Role(BaseModel):
    id: int
    name: str


class TokenCreation(BaseModel):
    expires_at: datetime


class UpdatePassword(BaseModel):
    old_password: str
    new_password: str


class User(BaseModel):
    id: UUID
    email: EmailStr
    name: str
    role: Role


class TokenInfo(TokenCreation):
    id: UUID
    expires_at: datetime
    created_at: datetime


class Token(TokenInfo):
    token: str
