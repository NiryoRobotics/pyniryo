# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the PyNiryo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyNiryo 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-30 09:26+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/vision/image_processing_api.rst:2
msgid "Functions Documentation"
msgstr ""

#: ../../source/vision/image_processing_api.rst:5
msgid "Section is not finished yet !"
msgstr ""

#: ../../source/vision/image_processing_api.rst:7
msgid ""
"This file presents the different functions and :ref:`Enums` available for"
" image processing"
msgstr ""

#: ../../source/vision/image_processing_api.rst:10
msgid "These functions are divided in subsections:"
msgstr ""

#: ../../source/vision/image_processing_api.rst:12
msgid ""
":ref:`Pure Image Processing` are used to deal with the thresholding, "
"contours detection, .."
msgstr ""

#: ../../source/vision/image_processing_api.rst:14
msgid ""
":ref:`Workspaces wise` section contains functions to extract workspace "
"and deal with the relative position in the workspace"
msgstr ""

#: ../../source/vision/image_processing_api.rst:16
msgid "The section :ref:`Show` allows to display images"
msgstr ""

#: ../../source/vision/image_processing_api.rst:17
msgid ""
":ref:`Image Editing` contains lot of function which can compress images, "
"add text to image, ..."
msgstr ""

#: ../../source/vision/image_processing_api.rst:23
msgid "Pure Image Processing"
msgstr ""

#: of vision.image_functions.biggest_contours_finder:1
msgid "Function to find the biggest contour in an binary image"
msgstr ""

#: of vision.image_functions.add_annotation_to_image
#: vision.image_functions.biggest_contours_finder
#: vision.image_functions.compress_image vision.image_functions.concat_imgs
#: vision.image_functions.debug_markers
#: vision.image_functions.debug_threshold_color
#: vision.image_functions.draw_contours
#: vision.image_functions.extract_img_workspace
#: vision.image_functions.get_contour_angle
#: vision.image_functions.get_contour_barycenter
#: vision.image_functions.morphological_transformations
#: vision.image_functions.relative_pos_from_pixels
#: vision.image_functions.resize_img vision.image_functions.show_img
#: vision.image_functions.show_img_and_check_close
#: vision.image_functions.show_img_and_wait_close
#: vision.image_functions.threshold_hsv vision.image_functions.uncompress_image
#: vision.image_functions.undistort_image
msgid "Parameters"
msgstr ""

#: of vision.image_functions.biggest_contours_finder:3
msgid "Binary Image"
msgstr ""

#: of vision.image_functions.biggest_contours_finder:5
msgid "maximal number of contours which will be returned"
msgstr ""

#: of vision.image_functions.add_annotation_to_image
#: vision.image_functions.biggest_contours_finder
#: vision.image_functions.compress_image vision.image_functions.concat_imgs
#: vision.image_functions.debug_markers
#: vision.image_functions.debug_threshold_color
#: vision.image_functions.draw_contours
#: vision.image_functions.extract_img_workspace
#: vision.image_functions.get_contour_angle
#: vision.image_functions.get_contour_barycenter
#: vision.image_functions.morphological_transformations
#: vision.image_functions.relative_pos_from_pixels
#: vision.image_functions.resize_img vision.image_functions.show_img
#: vision.image_functions.show_img_and_check_close
#: vision.image_functions.show_img_and_wait_close
#: vision.image_functions.threshold_hsv vision.image_functions.uncompress_image
#: vision.image_functions.undistort_image
msgid "Returns"
msgstr ""

#: of vision.image_functions.biggest_contours_finder:7
msgid "biggest contours found"
msgstr ""

#: of vision.image_functions.add_annotation_to_image
#: vision.image_functions.biggest_contours_finder
#: vision.image_functions.compress_image vision.image_functions.concat_imgs
#: vision.image_functions.debug_markers
#: vision.image_functions.debug_threshold_color
#: vision.image_functions.draw_contours
#: vision.image_functions.extract_img_workspace
#: vision.image_functions.get_contour_angle
#: vision.image_functions.get_contour_barycenter
#: vision.image_functions.morphological_transformations
#: vision.image_functions.relative_pos_from_pixels
#: vision.image_functions.resize_img vision.image_functions.show_img
#: vision.image_functions.show_img_and_check_close
#: vision.image_functions.show_img_and_wait_close
#: vision.image_functions.threshold_hsv vision.image_functions.uncompress_image
#: vision.image_functions.undistort_image
msgid "Return type"
msgstr ""

#: of vision.image_functions.debug_threshold_color:1
msgid "Return masked image to see the effect of color threshold"
msgstr ""

#: of vision.image_functions.debug_threshold_color:3
#: vision.image_functions.uncompress_image:5
msgid "OpenCV image"
msgstr ""

#: of vision.image_functions.debug_threshold_color:5
msgid "Color used for debug"
msgstr ""

#: of vision.image_functions.debug_threshold_color:7
msgid "Masked image"
msgstr ""

#: of vision.image_functions.draw_contours:1
msgid "Draw a list of contour on an image and return the drawing image"
msgstr ""

#: of vision.image_functions.add_annotation_to_image:3
#: vision.image_functions.draw_contours:3 vision.image_functions.show_img:5
#: vision.image_functions.show_img_and_check_close:5
#: vision.image_functions.show_img_and_wait_close:5
msgid "Image"
msgstr ""

#: of vision.image_functions.draw_contours:5
msgid "contours list"
msgstr ""

#: of vision.image_functions.draw_contours:7
msgid "Image with drawing"
msgstr ""

#: of vision.image_functions.get_contour_angle:1
msgid ""
"Return orientation of a contour according to the smallest side in order "
"to be well oriented for gripper"
msgstr ""

#: of vision.image_functions.get_contour_angle:4
msgid "contour"
msgstr ""

#: of vision.image_functions.get_contour_angle:6
msgid "Angle in radians"
msgstr ""

#: of vision.image_functions.get_contour_barycenter:1
msgid "Return barycenter of an OpenCV Contour"
msgstr ""

#: of vision.image_functions.get_contour_barycenter:5
msgid "Barycenter X, Barycenter Y"
msgstr ""

#: of vision.image_functions.morphological_transformations:1
msgid "Take black & white image and apply morphological transformation"
msgstr ""

#: of vision.image_functions.morphological_transformations:3
msgid "Black & White Image"
msgstr ""

#: of vision.image_functions.morphological_transformations:5
msgid ""
"CLOSE/OPEN/ERODE/DILATE => See on OpenCV/Google if you do not know these "
"words"
msgstr ""

#: of vision.image_functions.morphological_transformations:7
msgid "tuple corresponding to the size of the kernel"
msgstr ""

#: of vision.image_functions.morphological_transformations:9
msgid "RECT/ELLIPSE/CROSS => see on OpenCV"
msgstr ""

#: of vision.image_functions.morphological_transformations:11
msgid "image after processing"
msgstr ""

#: of vision.image_functions.threshold_hsv:1
msgid ""
"Take BGR image (OpenCV imread result) and return thresholded image "
"according to values on HSV (Hue, Saturation, Value) Pixel will worth 1 if"
" a pixel has a value between min_v and max_v for all channels"
msgstr ""

#: of vision.image_functions.threshold_hsv:5
msgid "image BGR if rgb_space = False"
msgstr ""

#: of vision.image_functions.threshold_hsv:7
msgid "list corresponding to [min_value_H,min_value_S,min_value_V]"
msgstr ""

#: of vision.image_functions.threshold_hsv:9
msgid "list corresponding to [max_value_H,max_value_S,max_value_V]"
msgstr ""

#: of vision.image_functions.threshold_hsv:11
msgid "True if you want to use S channel as S' = S x V else classic"
msgstr ""

#: of vision.image_functions.threshold_hsv:13
msgid "Useful for Red color cause it is at both extremum"
msgstr ""

#: of vision.image_functions.threshold_hsv:15
msgid "threshold image"
msgstr ""

#: ../../source/vision/image_processing_api.rst:30
msgid "Workspaces wise"
msgstr ""

#: of vision.image_functions.debug_markers:1
msgid "Display detected markers on an image"
msgstr ""

#: of vision.image_functions.debug_markers:3
msgid "OpenCV image which contain Niryo's markers"
msgstr ""

#: of vision.image_functions.debug_markers:5
#: vision.image_functions.extract_img_workspace:5
msgid ""
"Ratio between the width and the height of the area represented by the "
"markers"
msgstr ""

#: of vision.image_functions.debug_markers:7
msgid "(status, annotated image)"
msgstr ""

#: of vision.image_functions.extract_img_workspace:1
msgid "Extract working area from an image thanks to 4 Niryo's markers"
msgstr ""

#: of vision.image_functions.extract_img_workspace:3
msgid "OpenCV image which contain 4 Niryo's markers"
msgstr ""

#: of vision.image_functions.extract_img_workspace:7
msgid "extracted and warped working area image"
msgstr ""

#: of vision.image_functions.relative_pos_from_pixels:1
msgid "Transform a pixels position to a relative position"
msgstr ""

#: of vision.image_functions.relative_pos_from_pixels:3
msgid "Image where the object is detected"
msgstr ""

#: of vision.image_functions.relative_pos_from_pixels:5
msgid "coordinate X"
msgstr ""

#: of vision.image_functions.relative_pos_from_pixels:7
msgid "coordinate Y"
msgstr ""

#: of vision.image_functions.relative_pos_from_pixels:9
msgid "X relative, Y relative"
msgstr ""

#: ../../source/vision/image_processing_api.rst:36
msgid "Show"
msgstr ""

#: of vision.image_functions.show_img:1
msgid "Display an image during a certain time"
msgstr ""

#: of vision.image_functions.show_img:3
#: vision.image_functions.show_img_and_check_close:3
#: vision.image_functions.show_img_and_wait_close:3
msgid "window's name"
msgstr ""

#: of vision.image_functions.show_img:7
msgid "Wait time in milliseconds"
msgstr ""

#: of vision.image_functions.show_img:9
msgid "value of the key pressed during the display"
msgstr ""

#: of vision.image_functions.show_img_and_check_close:1
msgid "Display an image and check whether the user want to close"
msgstr ""

#: of vision.image_functions.show_img_and_check_close:7
msgid "boolean indicating if the user wanted to leave"
msgstr ""

#: of vision.image_functions.show_img_and_wait_close:1
msgid "Display an image and wait that the user close it"
msgstr ""

#: of vision.image_functions.show_img_and_wait_close:7
msgid "None"
msgstr ""

#: ../../source/vision/image_processing_api.rst:42
msgid "Image Editing"
msgstr ""

#: of vision.image_functions.add_annotation_to_image:1
msgid "Add Annotation to an image"
msgstr ""

#: of vision.image_functions.add_annotation_to_image:5
msgid "text string"
msgstr ""

#: of vision.image_functions.add_annotation_to_image:7
msgid "if you write the text on top"
msgstr ""

#: of vision.image_functions.add_annotation_to_image:9
msgid "img with text written on it"
msgstr ""

#: of vision.image_functions.compress_image:1
msgid "Compress OpenCV image"
msgstr ""

#: of vision.image_functions.compress_image:3
#: vision.image_functions.resize_img:3
msgid "OpenCV Image"
msgstr ""

#: of vision.image_functions.compress_image:5
msgid ""
"integer between 1 - 100. The higher it is, the less information will be "
"lost, but the heavier the compressed image will be"
msgstr ""

#: of vision.image_functions.compress_image:8
msgid "status & string representing compressed image"
msgstr ""

#: of vision.image_functions.concat_imgs:1
msgid "Concat multiple images along 1 axis"
msgstr ""

#: of vision.image_functions.concat_imgs:3
msgid "tuple of images"
msgstr ""

#: of vision.image_functions.concat_imgs:5
msgid "0 means vertically and 1 means horizontally"
msgstr ""

#: of vision.image_functions.concat_imgs:7
msgid "Concat image"
msgstr ""

#: of vision.image_functions.resize_img:1
msgid ""
"Resize an image. The user should precise only width or height if he wants"
" to keep image's ratio"
msgstr ""

#: of vision.image_functions.resize_img:5
msgid "Target Width"
msgstr ""

#: of vision.image_functions.resize_img:7
msgid "Target Height"
msgstr ""

#: of vision.image_functions.resize_img:9
msgid "OpenCV interpolation flag"
msgstr ""

#: of vision.image_functions.resize_img:11
msgid "resized image"
msgstr ""

#: of vision.image_functions.uncompress_image:1
msgid "Take a compressed img and return an OpenCV image"
msgstr ""

#: of vision.image_functions.uncompress_image:3
msgid "compressed image"
msgstr ""

#: of vision.image_functions.undistort_image:1
msgid "Use camera intrinsics to undistort raw image"
msgstr ""

#: of vision.image_functions.undistort_image:3
msgid "Raw Image"
msgstr ""

#: of vision.image_functions.undistort_image:5
msgid "Camera Intrinsics matrix"
msgstr ""

#: of vision.image_functions.undistort_image:7
msgid "Distortion Coefficient"
msgstr ""

#: of vision.image_functions.undistort_image:9
msgid "Undistorted image"
msgstr ""

#: ../../source/vision/image_processing_api.rst:49
msgid "Enums Image Processing"
msgstr ""

#: ../../source/vision/image_processing_api.rst:51
msgid "Enums are used to pass specific parameters to functions."
msgstr ""

#: ../../source/vision/image_processing_api.rst:53
msgid "List of enums:"
msgstr ""

#: ../../source/vision/image_processing_api.rst:55
msgid ":class:`~.vision.enums.ColorHSV`"
msgstr ""

#: ../../source/vision/image_processing_api.rst:56
msgid ":class:`~.vision.enums.ColorHSVPrime`"
msgstr ""

#: ../../source/vision/image_processing_api.rst:57
msgid ":class:`~.vision.enums.ObjectType`"
msgstr ""

#: ../../source/vision/image_processing_api.rst:58
msgid ":class:`~.vision.enums.MorphoType`"
msgstr ""

#: ../../source/vision/image_processing_api.rst:59
msgid ":class:`~.vision.enums.KernelType`"
msgstr ""

#: of vision.enums.ColorHSV:1 vision.enums.ColorHSVPrime:1
msgid "MIN HSV, MAX HSV, Invert Hue (bool)"
msgstr ""

#: of vision.enums.KernelType:1 vision.enums.MorphoType:1
#: vision.enums.ObjectType:1
msgid "An enumeration."
msgstr ""

