# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the PyNiryo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: PyNiryo 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-13 14:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Language: fr_FR\n"
"X-Source-Language: C\n"

#: ../../source/api_doc/api.rst:2
msgid "PyNiryo API Documentation"
msgstr "Documentation de l'API PyNiryo"

#: ../../source/api_doc/api.rst:4
msgid ""
"This file presents the different :ref:`source/api_doc/api:Command "
"Functions`, :ref:`source/api_doc/api:Enums` & "
":ref:`source/api_doc/api:Python Object classes` available with the API."
msgstr ""
"Ce document présente les différentes :ref:`source/api_doc/api:Command "
"Functions`, :ref:`source/api_doc/api:Enums` & les "
":ref:`source/api_doc/api:Python object classes` disponibles avec l'API"

#: ../../source/api_doc/api.rst:7
msgid ""
":ref:`source/api_doc/api:Command Functions` are used to deal directly with "
"the robot. It could be :meth:`~.api.tcp_client.NiryoRobot.move_joints`, "
":meth:`~.api.tcp_client.NiryoRobot.get_hardware_status` "
":meth:`~.api.tcp_client.NiryoRobot.vision_pick`, or also "
":meth:`~.api.tcp_client.NiryoRobot.run_conveyor`"
msgstr ""
"Les :ref:`source/api_doc/api:Command Functions` sont utilisées pour "
"intéragir directement avec le robot. Elles peuvent être "
":meth:`~.api.tcp_client.NiryoRobot.move_joints`, "
":meth:`~.api.tcp_client.NiryoRobot.get_hardware_status` "
":meth:`~.api.tcp_client.NiryoRobot.vision_pick`, ou encore "
":meth:`~.api.tcp_client.NiryoRobot.run_conveyor`"

#: ../../source/api_doc/api.rst:12
msgid ""
":ref:`source/api_doc/api:Enums` are used to pass specific arguments to "
"functions. For instance :class:`~.api.enums_communication.PinState`, "
":class:`~.api.enums_communication.ConveyorDirection`, ..."
msgstr ""
":ref:`source/api_doc/api:Enums` sont utilisées pour passer des arguments "
"spécifiques aux fonctions. Par exemple "
":class:`~.api.enums_communication.PinState`, "
":class:`~.api.enums_communication.ConveyorDirection`, ..."

#: ../../source/api_doc/api.rst:15
msgid ""
":ref:`source/api_doc/api:Python Object classes`, as |pose_object|, ease some "
"operations"
msgstr ""
"Les :ref:`objets Python <source/api_doc/api:Python Object classes>`, tels "
"que |pose_object|, facilitent certaines opérations."

#: ../../source/api_doc/api.rst:18
msgid "Command functions"
msgstr "Fonctions de commande"

#: ../../source/api_doc/api.rst:20
msgid ""
"This section references all existing functions to control your robot, which "
"includes:"
msgstr ""
"Cette section référence toutes les fonctions existantes permettant de "
"contrôler votre robot, incluant :"

#: ../../source/api_doc/api.rst:22
msgid "Moving the robot"
msgstr "Bouger le robot"

#: ../../source/api_doc/api.rst:23
msgid "Using Vision"
msgstr "Utiliser la Vision"

#: ../../source/api_doc/api.rst:24
msgid "Controlling Conveyor Belts"
msgstr "Contrôler le convoyeur"

#: ../../source/api_doc/api.rst:25
msgid "Playing with Hardware"
msgstr "Utiliser le hardware"

#: ../../source/api_doc/api.rst:27
msgid ""
"All functions to control the robot are accessible via an instance of the "
"class :class:`~.api.enums_communication.NiryoRobot` ::"
msgstr ""
"Toutes les fonctions permettant de contrôler le robot sont disponibles "
"depuis une instance de la classe "
":class:`~.api.enums_communication.NiryoRobot` : ::"

#: ../../source/api_doc/api.rst:32
msgid "See examples on :ref:`source/examples/examples_basics:Examples: Basics`"
msgstr ""
"Voir un exemple dans la :ref:`section "
"Exemples<source/examples/examples_basics:Examples: Basics>`"

#: ../../source/api_doc/api.rst:34
msgid "List of functions subsections:"
msgstr "Liste des sous-sections des fonctions :"

#: ../../source/api_doc/api.rst:43
msgid "TCP Connection"
msgstr "Connexion TCP"

#: api.tcp_client.NiryoRobot.connect:1 of
msgid "Connect to the TCP Server"
msgstr "Se connecter au serveur TCP"

#: api.tcp_client.NiryoRobot.activate_electromagnet
#: api.tcp_client.NiryoRobot.analog_read
#: api.tcp_client.NiryoRobot.analog_write api.tcp_client.NiryoRobot.calibrate
#: api.tcp_client.NiryoRobot.close_gripper api.tcp_client.NiryoRobot.connect
#: api.tcp_client.NiryoRobot.control_conveyor
#: api.tcp_client.NiryoRobot.deactivate_electromagnet
#: api.tcp_client.NiryoRobot.delete_dynamic_frame
#: api.tcp_client.NiryoRobot.delete_workspace
#: api.tcp_client.NiryoRobot.detect_object
#: api.tcp_client.NiryoRobot.digital_read
#: api.tcp_client.NiryoRobot.digital_write
#: api.tcp_client.NiryoRobot.edit_dynamic_frame
#: api.tcp_client.NiryoRobot.enable_tcp
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints
#: api.tcp_client.NiryoRobot.forward_kinematics
#: api.tcp_client.NiryoRobot.get_pose_saved
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame
#: api.tcp_client.NiryoRobot.get_sound_duration
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel
#: api.tcp_client.NiryoRobot.get_workspace_ratio
#: api.tcp_client.NiryoRobot.inverse_kinematics
#: api.tcp_client.NiryoRobot.jog_joints api.tcp_client.NiryoRobot.jog_pose
#: api.tcp_client.NiryoRobot.led_ring_alternate
#: api.tcp_client.NiryoRobot.led_ring_breath
#: api.tcp_client.NiryoRobot.led_ring_chase
#: api.tcp_client.NiryoRobot.led_ring_custom
#: api.tcp_client.NiryoRobot.led_ring_flashing
#: api.tcp_client.NiryoRobot.led_ring_go_up
#: api.tcp_client.NiryoRobot.led_ring_go_up_down
#: api.tcp_client.NiryoRobot.led_ring_rainbow
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle
#: api.tcp_client.NiryoRobot.led_ring_snake
#: api.tcp_client.NiryoRobot.led_ring_solid
#: api.tcp_client.NiryoRobot.led_ring_wipe
#: api.tcp_client.NiryoRobot.move_joints
#: api.tcp_client.NiryoRobot.move_linear_pose
#: api.tcp_client.NiryoRobot.move_linear_relative
#: api.tcp_client.NiryoRobot.move_pose api.tcp_client.NiryoRobot.move_relative
#: api.tcp_client.NiryoRobot.move_to_object
#: api.tcp_client.NiryoRobot.open_gripper
#: api.tcp_client.NiryoRobot.pick_and_place
#: api.tcp_client.NiryoRobot.pick_from_pose
#: api.tcp_client.NiryoRobot.place_from_pose
#: api.tcp_client.NiryoRobot.play_sound api.tcp_client.NiryoRobot.run_conveyor
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses
#: api.tcp_client.NiryoRobot.save_pose
#: api.tcp_client.NiryoRobot.save_trajectory
#: api.tcp_client.NiryoRobot.save_workspace_from_points
#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses
#: api.tcp_client.NiryoRobot.say
#: api.tcp_client.NiryoRobot.set_arm_max_velocity
#: api.tcp_client.NiryoRobot.set_brightness
#: api.tcp_client.NiryoRobot.set_contrast
#: api.tcp_client.NiryoRobot.set_jog_control
#: api.tcp_client.NiryoRobot.set_learning_mode
#: api.tcp_client.NiryoRobot.set_led_color
#: api.tcp_client.NiryoRobot.set_pin_mode
#: api.tcp_client.NiryoRobot.set_saturation api.tcp_client.NiryoRobot.set_tcp
#: api.tcp_client.NiryoRobot.set_volume
#: api.tcp_client.NiryoRobot.setup_electromagnet
#: api.tcp_client.NiryoRobot.shift_linear_pose
#: api.tcp_client.NiryoRobot.shift_pose
#: api.tcp_client.NiryoRobot.stop_conveyor
#: api.tcp_client.NiryoRobot.unset_conveyor
#: api.tcp_client.NiryoRobot.vision_pick api.tcp_client.NiryoRobot.wait of
msgid "Parameters"
msgstr "Paramètres"

#: api.tcp_client.NiryoRobot.connect:3 of
msgid "IP Address"
msgstr "Adresse IP"

#: api.objects.PoseObject.copy_with_offsets api.objects.PoseObject.to_list
#: api.tcp_client.NiryoRobot.activate_electromagnet
#: api.tcp_client.NiryoRobot.analog_read
#: api.tcp_client.NiryoRobot.analog_write api.tcp_client.NiryoRobot.calibrate
#: api.tcp_client.NiryoRobot.calibrate_auto
#: api.tcp_client.NiryoRobot.clean_trajectory_memory
#: api.tcp_client.NiryoRobot.close_connection
#: api.tcp_client.NiryoRobot.close_gripper api.tcp_client.NiryoRobot.connect
#: api.tcp_client.NiryoRobot.control_conveyor
#: api.tcp_client.NiryoRobot.deactivate_electromagnet
#: api.tcp_client.NiryoRobot.delete_dynamic_frame
#: api.tcp_client.NiryoRobot.delete_pose
#: api.tcp_client.NiryoRobot.delete_trajectory
#: api.tcp_client.NiryoRobot.delete_workspace
#: api.tcp_client.NiryoRobot.detect_object
#: api.tcp_client.NiryoRobot.digital_read
#: api.tcp_client.NiryoRobot.digital_write
#: api.tcp_client.NiryoRobot.edit_dynamic_frame
#: api.tcp_client.NiryoRobot.enable_tcp
#: api.tcp_client.NiryoRobot.execute_registered_trajectory
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints
#: api.tcp_client.NiryoRobot.forward_kinematics
#: api.tcp_client.NiryoRobot.get_analog_io_state
#: api.tcp_client.NiryoRobot.get_camera_intrinsics
#: api.tcp_client.NiryoRobot.get_connected_conveyors_id
#: api.tcp_client.NiryoRobot.get_current_tool_id
#: api.tcp_client.NiryoRobot.get_custom_button_state
#: api.tcp_client.NiryoRobot.get_digital_io_state
#: api.tcp_client.NiryoRobot.get_hardware_status
#: api.tcp_client.NiryoRobot.get_image_parameters
#: api.tcp_client.NiryoRobot.get_img_compressed
#: api.tcp_client.NiryoRobot.get_joints
#: api.tcp_client.NiryoRobot.get_learning_mode
#: api.tcp_client.NiryoRobot.get_pose api.tcp_client.NiryoRobot.get_pose_quat
#: api.tcp_client.NiryoRobot.get_pose_saved
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list
#: api.tcp_client.NiryoRobot.get_saved_pose_list
#: api.tcp_client.NiryoRobot.get_saved_trajectory_list
#: api.tcp_client.NiryoRobot.get_sound_duration
#: api.tcp_client.NiryoRobot.get_sounds
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel
#: api.tcp_client.NiryoRobot.get_trajectory_saved
#: api.tcp_client.NiryoRobot.get_workspace_list
#: api.tcp_client.NiryoRobot.get_workspace_ratio
#: api.tcp_client.NiryoRobot.go_to_sleep
#: api.tcp_client.NiryoRobot.grasp_with_tool
#: api.tcp_client.NiryoRobot.inverse_kinematics
#: api.tcp_client.NiryoRobot.jog_joints api.tcp_client.NiryoRobot.jog_pose
#: api.tcp_client.NiryoRobot.led_ring_alternate
#: api.tcp_client.NiryoRobot.led_ring_breath
#: api.tcp_client.NiryoRobot.led_ring_chase
#: api.tcp_client.NiryoRobot.led_ring_custom
#: api.tcp_client.NiryoRobot.led_ring_flashing
#: api.tcp_client.NiryoRobot.led_ring_go_up
#: api.tcp_client.NiryoRobot.led_ring_go_up_down
#: api.tcp_client.NiryoRobot.led_ring_rainbow
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle
#: api.tcp_client.NiryoRobot.led_ring_snake
#: api.tcp_client.NiryoRobot.led_ring_solid
#: api.tcp_client.NiryoRobot.led_ring_turn_off
#: api.tcp_client.NiryoRobot.led_ring_wipe
#: api.tcp_client.NiryoRobot.move_joints
#: api.tcp_client.NiryoRobot.move_linear_pose
#: api.tcp_client.NiryoRobot.move_linear_relative
#: api.tcp_client.NiryoRobot.move_pose api.tcp_client.NiryoRobot.move_relative
#: api.tcp_client.NiryoRobot.move_to_home_pose
#: api.tcp_client.NiryoRobot.move_to_object
#: api.tcp_client.NiryoRobot.need_calibration
#: api.tcp_client.NiryoRobot.open_gripper
#: api.tcp_client.NiryoRobot.pick_and_place
#: api.tcp_client.NiryoRobot.pick_from_pose
#: api.tcp_client.NiryoRobot.place_from_pose
#: api.tcp_client.NiryoRobot.play_sound
#: api.tcp_client.NiryoRobot.pull_air_vacuum_pump
#: api.tcp_client.NiryoRobot.push_air_vacuum_pump
#: api.tcp_client.NiryoRobot.release_with_tool
#: api.tcp_client.NiryoRobot.reset_tcp api.tcp_client.NiryoRobot.run_conveyor
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses
#: api.tcp_client.NiryoRobot.save_last_learned_trajectory
#: api.tcp_client.NiryoRobot.save_pose
#: api.tcp_client.NiryoRobot.save_trajectory
#: api.tcp_client.NiryoRobot.save_workspace_from_points
#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses
#: api.tcp_client.NiryoRobot.say
#: api.tcp_client.NiryoRobot.set_arm_max_velocity
#: api.tcp_client.NiryoRobot.set_brightness
#: api.tcp_client.NiryoRobot.set_contrast
#: api.tcp_client.NiryoRobot.set_conveyor
#: api.tcp_client.NiryoRobot.set_jog_control
#: api.tcp_client.NiryoRobot.set_learning_mode
#: api.tcp_client.NiryoRobot.set_led_color
#: api.tcp_client.NiryoRobot.set_pin_mode
#: api.tcp_client.NiryoRobot.set_saturation api.tcp_client.NiryoRobot.set_tcp
#: api.tcp_client.NiryoRobot.set_volume
#: api.tcp_client.NiryoRobot.setup_electromagnet
#: api.tcp_client.NiryoRobot.shift_linear_pose
#: api.tcp_client.NiryoRobot.shift_pose
#: api.tcp_client.NiryoRobot.stop_conveyor
#: api.tcp_client.NiryoRobot.stop_sound api.tcp_client.NiryoRobot.tool_reboot
#: api.tcp_client.NiryoRobot.update_tool api.tcp_client.NiryoRobot.vision_pick
#: api.tcp_client.NiryoRobot.wait of
msgid "Return type"
msgstr "Type de la variable de retour"

#: api.tcp_client.NiryoRobot.close_connection:1 of
msgid "Close connection with robot"
msgstr "Couper la connexion avec le robot"

#: ../../source/api_doc/api.rst:49
msgid "Main purpose functions"
msgstr "Fonctions principales"

#: api.tcp_client.NiryoRobot.calibrate:1 of
msgid ""
"Calibrate (manually or automatically) motors. Automatic calibration will do "
"nothing if motors are already calibrated"
msgstr ""
"Calibrer (manuellement ou automatiquement) les moteurs. La calibration "
"automatique ne provoquera rien si les moteurs sont déjà calibrés"

#: api.tcp_client.NiryoRobot.calibrate:4 of
msgid "Auto or Manual"
msgstr "Auto ou Manuel"

#: api.tcp_client.NiryoRobot.calibrate_auto:1 of
msgid "Start a automatic motors calibration if motors are not calibrated yet"
msgstr ""
"Démarre une calibration automatique des moteurs si les moteurs n'ont pas "
"encore été calibrés"

#: api.tcp_client.NiryoRobot.need_calibration:1 of
msgid "Return a bool indicating whereas the robot motors need to be calibrate"
msgstr ""
"Renvoie un booléen indiquant si les moteurs du robot ont besoin d'être "
"calibrés"

#: api.tcp_client.NiryoRobot.get_learning_mode:1 of
msgid "Get learning mode state"
msgstr "Afficher l'état du mode apprentissage"

#: api.tcp_client.NiryoRobot.delete_dynamic_frame
#: api.tcp_client.NiryoRobot.detect_object
#: api.tcp_client.NiryoRobot.edit_dynamic_frame
#: api.tcp_client.NiryoRobot.get_analog_io_state
#: api.tcp_client.NiryoRobot.get_camera_intrinsics
#: api.tcp_client.NiryoRobot.get_connected_conveyors_id
#: api.tcp_client.NiryoRobot.get_custom_button_state
#: api.tcp_client.NiryoRobot.get_digital_io_state
#: api.tcp_client.NiryoRobot.get_hardware_status
#: api.tcp_client.NiryoRobot.get_image_parameters
#: api.tcp_client.NiryoRobot.get_img_compressed
#: api.tcp_client.NiryoRobot.get_joints
#: api.tcp_client.NiryoRobot.get_learning_mode
#: api.tcp_client.NiryoRobot.get_pose_quat
#: api.tcp_client.NiryoRobot.get_pose_saved
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list
#: api.tcp_client.NiryoRobot.get_sound_duration
#: api.tcp_client.NiryoRobot.get_sounds
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel
#: api.tcp_client.NiryoRobot.get_trajectory_saved
#: api.tcp_client.NiryoRobot.inverse_kinematics
#: api.tcp_client.NiryoRobot.led_ring_alternate
#: api.tcp_client.NiryoRobot.led_ring_breath
#: api.tcp_client.NiryoRobot.led_ring_chase
#: api.tcp_client.NiryoRobot.led_ring_custom
#: api.tcp_client.NiryoRobot.led_ring_flashing
#: api.tcp_client.NiryoRobot.led_ring_go_up
#: api.tcp_client.NiryoRobot.led_ring_go_up_down
#: api.tcp_client.NiryoRobot.led_ring_rainbow
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle
#: api.tcp_client.NiryoRobot.led_ring_snake
#: api.tcp_client.NiryoRobot.led_ring_solid
#: api.tcp_client.NiryoRobot.led_ring_turn_off
#: api.tcp_client.NiryoRobot.led_ring_wipe
#: api.tcp_client.NiryoRobot.move_linear_relative
#: api.tcp_client.NiryoRobot.move_relative
#: api.tcp_client.NiryoRobot.move_to_object
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses
#: api.tcp_client.NiryoRobot.set_conveyor
#: api.tcp_client.NiryoRobot.set_led_color
#: api.tcp_client.NiryoRobot.vision_pick of
msgid "Returns"
msgstr "Retourne"

#: api.tcp_client.NiryoRobot.get_learning_mode:3 of
msgid "``True`` if learning mode is on"
msgstr "``Vrai`` si le mode apprentissage est activé"

#: api.tcp_client.NiryoRobot.set_learning_mode:1 of
msgid "Set learning mode if param is ``True``, else turn it off"
msgstr "Allumer le mode apprentissage si param est ``Vrai``, sinon l'arrêter"

#: api.tcp_client.NiryoRobot.set_jog_control:3
#: api.tcp_client.NiryoRobot.set_learning_mode:3 of
msgid "``True`` or ``False``"
msgstr "``Vrai`` ou ``Faux``"

#: api.tcp_client.NiryoRobot.set_arm_max_velocity:1 of
msgid "Limit arm max velocity to a percentage of its maximum velocity"
msgstr ""
"Limiter la vitesse maximum du bras à un pourcentage de sa vitesse maximum"

#: api.tcp_client.NiryoRobot.set_arm_max_velocity:3 of
msgid "Should be between 1 & 100"
msgstr "Peut être entre 1 & 100"

#: api.tcp_client.NiryoRobot.set_jog_control:1 of
msgid "Set jog control mode if param is True, else turn it off"
msgstr ""
"Allumer le mode de contrôle par translation si param est ``Vrai``, sinon "
"l'arrêter"

#: api.tcp_client.NiryoRobot.wait:1 of
msgid "Wait for a certain time"
msgstr "Attendre pendant un certain temps"

#: api.tcp_client.NiryoRobot.wait:3 of
msgid "duration in seconds"
msgstr "durée en secondes"

#: ../../source/api_doc/api.rst:61
msgid "Joints & Pose"
msgstr "Axe & Pose"

#: api.tcp_client.NiryoRobot.get_joints:1 of
msgid "Get joints value in radians You can also use a getter ::"
msgstr ""
"Obtenir la valeur des axes en radians. Vous pouvez également utiliser un "
"getter ::"

#: api.tcp_client.NiryoRobot.get_joints:7
#: api.tcp_client.NiryoRobot.inverse_kinematics:6 of
msgid "List of joints value"
msgstr "Liste de la valeur des joints"

#: api.tcp_client.NiryoRobot.get_pose:1 of
msgid ""
"Get end effector link pose as [x, y, z, roll, pitch, yaw]. x, y & z are "
"expressed in meters / roll, pitch & yaw are expressed in radians You can "
"also use a getter ::"
msgstr ""
"Obtenir la position de l'effecteur en [w, y, z, roll, pitch, yaw]. x, y & z "
"sont exprimés en mètres / roll, pitch & yaw sont exprimés en radians. Il est "
"également possible d'utiliser un getter ::"

#: api.tcp_client.NiryoRobot.get_pose_quat:1 of
msgid "Get end effector link pose in Quaternion coordinates"
msgstr "Obtenir la position de l'effecteur en coordonnées Quaternion"

#: api.tcp_client.NiryoRobot.get_pose_quat:3 of
msgid ""
"Position and quaternion coordinates concatenated in a list : [x, y, z, qx, "
"qy, qz, qw]"
msgstr ""
"Position and quaternion coordinates concatenated in a list : [x, y, z, qx, "
"qy, qz, qw]"

#: api.tcp_client.NiryoRobot.move_joints:1 of
msgid "Move robot joints. Joints are expressed in radians."
msgstr "Bouger les axes du robots. Les axes sont exprimés en radians."

#: api.tcp_client.NiryoRobot.move_joints:3
#: api.tcp_client.NiryoRobot.move_pose:5 of
msgid "All lines of the next example realize the same operation: ::"
msgstr ""
"L'ensemble des lignes du prochain exemple réalisent la même opération : ::"

#: api.tcp_client.NiryoRobot.forward_kinematics:4
#: api.tcp_client.NiryoRobot.move_joints:9 of
msgid "either 6 args (1 for each joints) or a list of 6 joints"
msgstr "soit 6 args (1 pour chaque axe) ou une liste de 6 axes"

#: api.tcp_client.NiryoRobot.move_pose:1 of
msgid ""
"Move robot end effector pose to a (x, y, z, roll, pitch, yaw, frame_name) "
"pose in a particular frame (frame_name) if defined. x, y & z are expressed "
"in meters / roll, pitch & yaw are expressed in radians"
msgstr ""
"Modifie la position de l'effecteur du robot à une position (x, y, z,roll, "
"pitch, yaw), dans un repère particulier si défini. x, y & z sont exprimés en "
"mètres / roll, pitch, yaw sont exprimés en radians"

#: api.tcp_client.NiryoRobot.move_linear_pose:4
#: api.tcp_client.NiryoRobot.move_pose:15 of
msgid ""
"either 7 args (1 for each coordinates and 1 for the name of the frame) or a "
"list of 6 coordinates or a ``PoseObject`` and 1 for the frame name"
msgstr ""
"soit 6 args (1 pour chaque coordonnées et 1 pour le nom du repère) ou une "
"liste de 6 coordonnées, ou un  ``PoseObject`` et 1 pour le nom du repère"

#: api.tcp_client.NiryoRobot.move_linear_pose:1 of
msgid ""
"Move robot end effector pose to a (x, y, z, roll, pitch, yaw) pose with a "
"linear trajectory, in a particular frame (frame_name) if defined"
msgstr ""
"Modifie la position de l'effecteur du robot à une position (x, y, z,roll, "
"pitch, yaw), dans un repère particulier si défini, avec une trajectoire "
"linéaire"

#: api.tcp_client.NiryoRobot.shift_pose:1 of
msgid "Shift robot end effector pose along one axis"
msgstr "Glisser la position de l'effecteur du robot le long d'un axe"

#: api.tcp_client.NiryoRobot.shift_linear_pose:3
#: api.tcp_client.NiryoRobot.shift_pose:3 of
msgid "Axis along which the robot is shifted"
msgstr "Axe le long duquel l'effecteur du robot est déplacé"

#: api.tcp_client.NiryoRobot.shift_linear_pose:5
#: api.tcp_client.NiryoRobot.shift_pose:5 of
msgid "In meter for X/Y/Z and radians for roll/pitch/yaw"
msgstr "En mètres pour X/Y/Z et en radians pour roll/pitch/yaw"

#: api.tcp_client.NiryoRobot.shift_linear_pose:1 of
msgid "Shift robot end effector pose along one axis, with a linear trajectory"
msgstr ""
"Glisser la position de l'effecteur du robot le long d'un axe, avec une "
"trajectoire linéaire"

#: api.tcp_client.NiryoRobot.jog_joints:1 of
msgid ""
"Jog robot joints'. Jog corresponds to a shift without motion planning. "
"Values are expressed in radians."
msgstr ""
"Translation des axes du robot. La translation correspond à un glissement "
"sans plannification de mouvement. Les valeurs sont exprimées en radians."

#: api.tcp_client.NiryoRobot.jog_joints:5 of
msgid "either 6 args (1 for each joints) or a list of 6 joints offset"
msgstr "soit 6 args (1 pour chaque axe) ou une liste des offsets des 6 axes"

#: api.tcp_client.NiryoRobot.jog_pose:1 of
msgid ""
"Jog robot end effector pose Jog corresponds to a shift without motion "
"planning Arguments are [dx, dy, dz, d_roll, d_pitch, d_yaw] dx, dy & dz are "
"expressed in meters / d_roll, d_pitch & d_yaw are expressed in radians"
msgstr ""
"Les arguments sont [dx, dy, dz, d_roll, d_pitch, d_yaw] dx, dy & dz sont "
"exprimés en mètres / d_roll, d_pitch & d_yaw sont exprimés en radians"

#: api.tcp_client.NiryoRobot.jog_pose:6 of
msgid "either 6 args (1 for each coordinates) or a list of 6 offset"
msgstr "soit 6 args (1 pour chaque axe) ou une liste de 6 offset"

#: api.tcp_client.NiryoRobot.move_to_home_pose:1 of
msgid "Move to a position where the forearm lays on shoulder"
msgstr ""
"Bouger le robot à une position dans laquelle l'avant bras du robot repose "
"sur son épaule"

#: api.tcp_client.NiryoRobot.go_to_sleep:1 of
msgid "Go to home pose and activate learning mode"
msgstr "Retourner à la position de départ et activer le mode apprentissage "

#: api.tcp_client.NiryoRobot.forward_kinematics:1 of
msgid ""
"Compute forward kinematics of a given joints configuration and give the "
"associated spatial pose"
msgstr ""
"Calculer la cinématique directe d'une configuration des axes donnée et "
"donner la position dans l'espace qui y est associée"

#: api.tcp_client.NiryoRobot.inverse_kinematics:1 of
msgid "Compute inverse kinematics"
msgstr "Calculer la cinématique inverse"

#: api.tcp_client.NiryoRobot.inverse_kinematics:3 of
msgid ""
"either 6 args (1 for each coordinates) or a list of 6 coordinates or a "
"``PoseObject``"
msgstr ""
"soit 6 args (1 pour chaque coordonnées) ou une liste de 6 coordonnées, ou un "
" ``PoseObject``"

#: ../../source/api_doc/api.rst:79
msgid "Saved Poses"
msgstr "Positions sauvegardées"

#: api.tcp_client.NiryoRobot.get_pose_saved:1 of
msgid "Get pose saved in from Ned's memory"
msgstr "Utiliser une position sauvegardée depuis la mémoire de Ned"

#: api.tcp_client.NiryoRobot.get_pose_saved:3 of
msgid "Pose name in robot's memory"
msgstr "Nom de la position dans la mémoire du robot"

#: api.tcp_client.NiryoRobot.get_pose_saved:5 of
msgid "Pose associated to pose_name"
msgstr "Position associée au pose_name"

#: api.tcp_client.NiryoRobot.save_pose:1 of
msgid "Save pose in robot's memory"
msgstr "Sauvegarder une position dans la mémoire du robot"

#: api.tcp_client.NiryoRobot.pick_from_pose:10
#: api.tcp_client.NiryoRobot.place_from_pose:10
#: api.tcp_client.NiryoRobot.save_pose:4 api.tcp_client.NiryoRobot.set_tcp:4 of
msgid ""
"either 6 args (1 for each coordinates) or a list of 6 coordinates or a "
"PoseObject"
msgstr ""
"soit 6 args (1 pour chaque coordonnées) ou une liste de 6 coordonnées, ou un "
"PoseObject"

#: api.tcp_client.NiryoRobot.delete_pose:1 of
msgid "Delete pose from robot's memory"
msgstr "Supprimer une position dans la mémoire du robot"

#: api.tcp_client.NiryoRobot.get_saved_pose_list:1 of
msgid "Get list of poses' name saved in robot memory"
msgstr ""
"Afficher la liste de noms des positions sauvegardées dans la mémoire du robot"

#: ../../source/api_doc/api.rst:87
msgid "Pick & Place"
msgstr "Pick & Place"

#: api.tcp_client.NiryoRobot.pick_from_pose:1 of
msgid "Execute a picking from a pose."
msgstr "Exécuter un prélèvement depuis une position"

#: api.tcp_client.NiryoRobot.pick_from_pose:3 of
msgid "A picking is described as :"
msgstr "Un prélèvement est décrit comme :"

#: api.tcp_client.NiryoRobot.pick_from_pose:5 of
msgid "* going over the object"
msgstr "\\* descendre en direction de l'objet"

#: api.tcp_client.NiryoRobot.pick_from_pose:6
#: api.tcp_client.NiryoRobot.place_from_pose:6 of
msgid "* going down until height = z"
msgstr "\\* descendre jusque hauteur = z"

#: api.tcp_client.NiryoRobot.pick_from_pose:7 of
msgid "* grasping with tool"
msgstr "\\* attraper avec un outil"

#: api.tcp_client.NiryoRobot.pick_from_pose:8 of
msgid "* going back over the object"
msgstr "\\* retourner au dessus de l'objet "

#: api.tcp_client.NiryoRobot.place_from_pose:1 of
msgid "Execute a placing from a position."
msgstr "Exécuter un placement depuis une position"

#: api.tcp_client.NiryoRobot.place_from_pose:3 of
msgid "A placing is described as :"
msgstr "Un placement est décrit comme :"

#: api.tcp_client.NiryoRobot.place_from_pose:5 of
msgid "* going over the place"
msgstr "\\* aller en direction d'un emplacement"

#: api.tcp_client.NiryoRobot.place_from_pose:7 of
msgid "* releasing the object with tool"
msgstr "\\* relâcher l'objet avec un outil"

#: api.tcp_client.NiryoRobot.place_from_pose:8 of
msgid "* going back over the place"
msgstr "\\* retourner au dessus de l'emplacement "

#: api.tcp_client.NiryoRobot.pick_and_place:1 of
msgid "Execute a pick then a place"
msgstr "Exécuter un prélèvement puis un placement"

#: api.tcp_client.NiryoRobot.pick_and_place:3 of
msgid "Pick Pose : [x, y, z, roll, pitch, yaw] or PoseObject"
msgstr "Position de prélèvement : [x, y, z, roll, pitch, yaw] ou PoseObject"

#: api.tcp_client.NiryoRobot.pick_and_place:5 of
msgid "Place Pose : [x, y, z, roll, pitch, yaw] or PoseObject"
msgstr "Position de placement : [x, y, z, roll, pitch, yaw] ou PoseObject"

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses:5
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:17
#: api.tcp_client.NiryoRobot.pick_and_place:7 of
msgid "Distance from waypoints before smoothing trajectory"
msgstr ""
"Distance entre les points de passage avant le lissage de la trajectoire"

#: ../../source/api_doc/api.rst:94
msgid "Trajectories"
msgstr "Trajectoires"

#: api.tcp_client.NiryoRobot.get_trajectory_saved:1 of
msgid "Get trajectory saved in Ned's memory"
msgstr "Obtenir la trajectoire sauvegardée dans la mémoire de Ned"

#: api.tcp_client.NiryoRobot.get_trajectory_saved:4 of
msgid "Trajectory"
msgstr "Trajectoires"

#: api.tcp_client.NiryoRobot.get_saved_trajectory_list:1 of
msgid "Get list of trajectories' name saved in robot memory"
msgstr ""
"Obtenir la liste des noms des trajectoires sauvegardées dans la mémoire du "
"robot"

#: api.tcp_client.NiryoRobot.execute_registered_trajectory:1 of
msgid "Execute trajectory from Ned's memory"
msgstr "Exécuter la trajectoire depuis la mémoire de Ned"

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses:1 of
msgid "Execute trajectory from list of poses"
msgstr "Exécuter une trajectoire depuis une liste de positions"

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses:3 of
msgid "List of [x,y,z,qx,qy,qz,qw] or list of [x,y,z,roll,pitch,yaw]"
msgstr ""
"Liste de position [x,y,z,qx,qy,qz,qw] ou liste de posiiton "
"[x,y,z,roll,pitch,yaw]"

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:1 of
msgid "Execute trajectory from list of poses and joints"
msgstr ""
"Exécuter la trajectoire à partir de la liste de positions cartésiennes et "
"depositions des joints"

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:3
#: api.tcp_client.NiryoRobot.edit_dynamic_frame:3
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:3
#: api.tcp_client.NiryoRobot.get_analog_io_state:3
#: api.tcp_client.NiryoRobot.get_digital_io_state:3
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame:3
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list:3
#: api.tcp_client.NiryoRobot.led_ring_custom:4
#: api.tcp_client.NiryoRobot.led_ring_solid:3
#: api.tcp_client.NiryoRobot.led_ring_turn_off:3
#: api.tcp_client.NiryoRobot.move_linear_relative:3
#: api.tcp_client.NiryoRobot.move_relative:3
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:3
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:3
#: api.tcp_client.NiryoRobot.set_led_color:3
#: api.tcp_client.NiryoRobot.tool_reboot:3 of
msgid "Example: ::"
msgstr "Exemple ::"

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:11 of
msgid ""
"List of [x,y,z,qx,qy,qz,qw] or list of [x,y,z,roll,pitch,yaw] or a list of "
"[j1,j2,j3,j4,j5,j6]"
msgstr "Liste contenant [x,y,z,qx,qy,qz,qw] ou [x,y,z,roll,pitch,yaw]"

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:14 of
msgid ""
"List of string 'pose' or 'joint', or ['pose'] (if poses only) or ['joint'] "
"(if joints only). If None, it is assumed there are only poses in the list."
msgstr ""
"Liste de string contenant 'pose' ou 'joint', ou ['pose'] (si uniquement des "
"'pose') ou ['joint'] (si uniquement des 'joint'). Si l'argument est None, le "
"type est mis à ['Pose'] par défaut."

#: api.tcp_client.NiryoRobot.save_trajectory:1 of
msgid "Save trajectory in robot memory"
msgstr "Sauvegarder la trajectoire dans la mémoire du robot"

#: api.tcp_client.NiryoRobot.save_trajectory:3 of
msgid ""
"list of Joints [j1, j2, j3, j4, j5, j6] as waypoints to create the trajectory"
msgstr ""
"la liste des axes [j1, j2, j3, j4, j5, j6] comme point de passage pour créer "
"la trajectoire"

#: api.tcp_client.NiryoRobot.save_trajectory:5 of
msgid "Name you want to give to the trajectory"
msgstr "Nom de la trajectoire"

#: api.tcp_client.NiryoRobot.save_trajectory:7 of
msgid "Description you want to give to the trajectory"
msgstr "Description de la trajectoire"

#: api.tcp_client.NiryoRobot.save_last_learned_trajectory:1 of
msgid "Save last user executed trajectory"
msgstr "Sauvegarde la dernière trajectoire exécutée par l'utilisateur"

#: api.tcp_client.NiryoRobot.clean_trajectory_memory:1
#: api.tcp_client.NiryoRobot.delete_trajectory:1 of
msgid "Delete trajectory from robot's memory"
msgstr "Supprimer la trajectoire de la mémoire du robot."

#: ../../source/api_doc/api.rst:107
msgid "Dynamic frames"
msgstr "Repères dynamiques"

#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list:1 of
msgid "Get list of saved dynamic frames"
msgstr "Obtient la liste des repères sauvegardés"

#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list:9 of
msgid "list of dynamic frames name, list of description of dynamic frames"
msgstr "la liste des nom des repères, la liste des descriptions des repères"

#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame:1 of
msgid "Get name, description and pose of a dynamic frame"
msgstr "Obtient le nom, la description et la position d'un repère dynamique"

#: api.tcp_client.NiryoRobot.edit_dynamic_frame:7
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame:7
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:11
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:11 of
msgid "name of the frame"
msgstr "nom du repère"

#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame:9 of
msgid "name, description, position and orientation of a frame"
msgstr "le nom, la description et la position d'un repère"

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:1 of
msgid "Create a dynamic frame with 3 poses (origin, x, y)"
msgstr "Créer un repère dynamique avec 3 positions (origine, x, y)"

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:13
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:13 of
msgid "description of the frame"
msgstr "description du repère"

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:15 of
msgid "pose of the origin of the frame"
msgstr "position d'origine du repère"

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:17 of
msgid "pose of the point x of the frame"
msgstr "position du point x du repère"

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:19 of
msgid "pose of the point y of the frame"
msgstr "position du point y du repère"

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:9
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:21
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:21 of
msgid "indicate if the frame belong to a workspace"
msgstr "indique si le repère appartient à un espace de travail"

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:11
#: api.tcp_client.NiryoRobot.edit_dynamic_frame:13
#: api.tcp_client.NiryoRobot.led_ring_alternate:24
#: api.tcp_client.NiryoRobot.led_ring_breath:19
#: api.tcp_client.NiryoRobot.led_ring_chase:20
#: api.tcp_client.NiryoRobot.led_ring_custom:12
#: api.tcp_client.NiryoRobot.led_ring_flashing:22
#: api.tcp_client.NiryoRobot.led_ring_go_up:20
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:20
#: api.tcp_client.NiryoRobot.led_ring_rainbow:16
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:16
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:16
#: api.tcp_client.NiryoRobot.led_ring_snake:18
#: api.tcp_client.NiryoRobot.led_ring_solid:9
#: api.tcp_client.NiryoRobot.led_ring_turn_off:7
#: api.tcp_client.NiryoRobot.led_ring_wipe:15
#: api.tcp_client.NiryoRobot.move_linear_relative:11
#: api.tcp_client.NiryoRobot.move_relative:11
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:23
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:23
#: api.tcp_client.NiryoRobot.set_led_color:11 of
msgid "status, message"
msgstr "status, message"

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:1 of
msgid "Create a dynamic frame with 3 points (origin, x, y)"
msgstr "Créer un repère dynamique avec 3 points (origine, x, y)"

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:15 of
msgid "origin point of the frame"
msgstr "point d'origine du repère"

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:17 of
msgid "point x of the frame"
msgstr "point x du repère"

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:19 of
msgid "point y of the frame"
msgstr "point y du repère"

#: api.tcp_client.NiryoRobot.edit_dynamic_frame:1 of
msgid "Modify a dynamic frame"
msgstr "Modifie un repère dynamique"

#: api.tcp_client.NiryoRobot.edit_dynamic_frame:9 of
msgid "new name of the frame"
msgstr "nouveau nom du repère"

#: api.tcp_client.NiryoRobot.edit_dynamic_frame:11 of
msgid "new description of the frame"
msgstr "nouvelle description du repère"

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:1 of
msgid "Delete a dynamic frame"
msgstr "Supprime un repère dynamique"

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:7 of
msgid "name of the frame to remove"
msgstr "nom du repère à supprimer"

#: api.tcp_client.NiryoRobot.move_relative:1 of
msgid "Move robot end of a offset in a frame"
msgstr "Déplace l'effecteur du robot d'un offset dans un repère"

#: api.tcp_client.NiryoRobot.move_linear_relative:7
#: api.tcp_client.NiryoRobot.move_relative:7 of
msgid "list which contains offset of x, y, z, roll, pitch, yaw"
msgstr "list qui contient les paramètres x, y, z, roll, pitch & yaw"

#: api.tcp_client.NiryoRobot.move_linear_relative:9
#: api.tcp_client.NiryoRobot.move_relative:9 of
msgid "name of local frame"
msgstr "nom du repère"

#: api.tcp_client.NiryoRobot.move_linear_relative:1 of
msgid "Move robot end of a offset by a linear movement in a frame"
msgstr ""
"Déplace l'effecteur du robot d'un offset dans un repère par un mouvement "
"linéaire"

#: ../../source/api_doc/api.rst:119
msgid "Tools"
msgstr "Outils"

#: api.tcp_client.NiryoRobot.get_current_tool_id:1 of
msgid "Get equipped tool Id"
msgstr "Obtenir l'ID de l'outil installé"

#: api.tcp_client.NiryoRobot.update_tool:1 of
msgid "Update equipped tool"
msgstr "Mettre à jour l'outil installé"

#: api.tcp_client.NiryoRobot.grasp_with_tool:1 of
msgid ""
"Grasp with tool | This action correspond to | - Close gripper for Grippers | "
"- Pull Air for Vacuum pump | - Activate for Electromagnet"
msgstr ""
"Saisir avec l'outil | Cette action correspond à | - Close gripper pour les "
"grippers | - Pull Air pour la pompe à vide | - Activate pour l'électroaimant"

#: api.tcp_client.NiryoRobot.release_with_tool:1 of
msgid ""
"Release with tool | This action correspond to | - Open gripper for Grippers "
"| - Push Air for Vacuum pump | - Deactivate for Electromagnet"
msgstr ""
"Relâcher avec l'outil | Cette action correspond à | - Open gripper pour les "
"grippers | - Push Air pour la pompe à vide | - Deactivate pour "
"l'électroaimant"

#: api.tcp_client.NiryoRobot.open_gripper:1 of
msgid "Open gripper"
msgstr "Ouvrir la pince"

#: api.tcp_client.NiryoRobot.close_gripper:3
#: api.tcp_client.NiryoRobot.open_gripper:3 of
msgid "Between 100 & 1000 (only for Niryo One and Ned1)"
msgstr "Entre 100 & 1000 (uniquement pour Niryo One et Ned1)"

#: api.tcp_client.NiryoRobot.open_gripper:5 of
msgid "Closing torque percentage (only for Ned2)"
msgstr "Pourcentage de couple de fermeture (uniquement pour Ned2)"

#: api.tcp_client.NiryoRobot.open_gripper:7 of
msgid "Hold torque percentage after closing (only for Ned2)"
msgstr ""
"Pourcentage de couple de maintien après fermeture (uniquementpour Ned2)"

#: api.tcp_client.NiryoRobot.close_gripper:1 of
msgid "Close gripper"
msgstr "Fermer la pince"

#: api.tcp_client.NiryoRobot.close_gripper:5 of
msgid "Opening torque percentage (only for Ned2)"
msgstr "Pourcentage de couple d'ouverture (uniquement pour Ned2)"

#: api.tcp_client.NiryoRobot.close_gripper:7 of
msgid "Hold torque percentage after opening (only for Ned2)"
msgstr "Pourcentage de couple de maintien ouverture (uniquementpour Ned2)"

#: api.tcp_client.NiryoRobot.pull_air_vacuum_pump:1 of
msgid "Pull air of vacuum pump"
msgstr "Aspirer l'air de la pompe à vide"

#: api.tcp_client.NiryoRobot.push_air_vacuum_pump:1 of
msgid "Push air of vacuum pump"
msgstr "Souffler l'air de la pompe à vide"

#: api.tcp_client.NiryoRobot.setup_electromagnet:1 of
msgid "Setup electromagnet on pin"
msgstr "Installer l'électroaimant sur une broche"

#: api.tcp_client.NiryoRobot.activate_electromagnet:1 of
msgid "Activate electromagnet associated to electromagnet_id on pin_id"
msgstr "Activer l'électroaimant associé à electromagnet_id sur pin_id"

#: api.tcp_client.NiryoRobot.deactivate_electromagnet:1 of
msgid "Deactivate electromagnet associated to electromagnet_id on pin_id"
msgstr "Désactiver l'électroaimant associé à electromagnet_id sur pin_id"

#: api.tcp_client.NiryoRobot.enable_tcp:1 of
msgid ""
"Enables or disables the TCP function (Tool Center Point). If activation is "
"requested, the last recorded TCP value will be applied. The default value "
"depends on the gripper equipped. If deactivation is requested, the TCP will "
"be coincident with the tool_link."
msgstr ""
"Active ou désactive la fonction PCO (Point Central de l'Outil). Si une "
"activation est demandée, la dernière valeur pour le PCO va être appliquée. "
"Par défaut la valeur dépend de la pince équipée. Si la désactivation est "
"demandée, le PCO va coincider avec le repère 'tool_link'."

#: api.tcp_client.NiryoRobot.enable_tcp:6 of
msgid "True to enable, False otherwise."
msgstr "True pour activer, False pour désactiver."

#: api.tcp_client.NiryoRobot.set_tcp:1 of
msgid ""
"Activates the TCP function (Tool Center Point) and defines the "
"transformation between the tool_link frame and the TCP frame."
msgstr ""
"Active la fonction de PCO (Point Central de l'Outil) et définit la "
"transformation entre le repère 'tool_link' et le repère du PCO."

#: api.tcp_client.NiryoRobot.reset_tcp:1 of
msgid ""
"Reset the TCP (Tool Center Point) transformation. The TCP will be reset "
"according to the tool equipped."
msgstr ""
"Réinitialise la transformation appliquée au PCO (Point Central de l'Outil). "
"La valeur par défaut dépend de l'outil actuellement équipé."

#: api.tcp_client.NiryoRobot.tool_reboot:1 of
msgid "Reboot the motor of the tool equparam_list = [workspace_name]"
msgstr "Redémarre le moteur de l'outil equipé"

#: ../../source/api_doc/api.rst:138
msgid "Hardware"
msgstr "Matériel"

#: api.tcp_client.NiryoRobot.set_pin_mode:1 of
msgid "Set pin number pin_id to mode pin_mode"
msgstr "Régler le numéro de broche pin_id sur le mode pin_mode"

#: api.tcp_client.NiryoRobot.digital_write:1 of
msgid "Set pin_id state to digital_state"
msgstr "Régler l'état de pin_id sur digital_state"

#: api.tcp_client.NiryoRobot.digital_read:1 of
msgid "Read pin number pin_id and return its state"
msgstr "Lire le numéro de broche pin_id et retourne à son état"

#: api.tcp_client.NiryoRobot.get_hardware_status:1 of
msgid ""
"Get hardware status : Temperature, Hardware version, motors names & types ..."
msgstr ""
"Obtenir le statut hardware : température, version hardware, noms et types "
"des moteurs ..."

#: api.tcp_client.NiryoRobot.get_hardware_status:3 of
msgid "Infos contains in a HardwareStatusObject"
msgstr "Informations contenues dans un HardwareStatusObject"

#: api.tcp_client.NiryoRobot.get_digital_io_state:1 of
msgid "Get Digital IO state : Names, modes, states."
msgstr "Obtenir l'état des IO digitaux : noms, modes, états"

#: api.tcp_client.NiryoRobot.get_digital_io_state:8 of
msgid "List of DigitalPinObject instance"
msgstr "Liste des instances DigitalPinObject"

#: api.tcp_client.NiryoRobot.get_analog_io_state:1 of
msgid "Get Analog IO state : Names, modes, states"
msgstr "Obtenir l'état des IO analogiques : noms, modes, états"

#: api.tcp_client.NiryoRobot.get_analog_io_state:9 of
msgid "List of AnalogPinObject instance"
msgstr "Liste des instances AnalogPinObject"

#: api.tcp_client.NiryoRobot.analog_write:1 of
msgid "Set and analog pin_id state to a value"
msgstr "Régler la valeur de la sortie analogique pin_id"

#: api.tcp_client.NiryoRobot.analog_write:5 of
msgid "voltage between 0 and 5V"
msgstr "tension entre 0V et 5V"

#: api.tcp_client.NiryoRobot.analog_read:1 of
msgid "Read the analog pin value"
msgstr "Lire la valeur d'un pin analogique"

#: api.tcp_client.NiryoRobot.get_custom_button_state:1 of
msgid "Get the Ned2's custom button state"
msgstr "Optenir l'état du bouton **Custom** du Ned2"

#: api.tcp_client.NiryoRobot.get_custom_button_state:3 of
msgid "True if pressed, False else"
msgstr "True si pressé, False sinon"

#: ../../source/api_doc/api.rst:152
msgid "Conveyor"
msgstr "Convoyeur"

#: api.tcp_client.NiryoRobot.set_conveyor:1 of
msgid "Activate a new conveyor and return its ID"
msgstr "Activer un nouveau convoyeur et renvoyer son ID"

#: api.tcp_client.NiryoRobot.set_conveyor:3 of
msgid "New conveyor ID"
msgstr "Nouvel ID du convoyeur"

#: api.tcp_client.NiryoRobot.unset_conveyor:1 of
msgid "Remove specific conveyor."
msgstr "Retirer un convoyeur spécifique"

#: api.tcp_client.NiryoRobot.unset_conveyor:3 of
msgid "Basically, ConveyorID.ONE or ConveyorID.TWO"
msgstr "Généralement, ConveyorID.ONE ou ConveyorID.TWO"

#: api.tcp_client.NiryoRobot.run_conveyor:1 of
msgid "Run conveyor at id 'conveyor_id'"
msgstr "Activer le convoyeur avec l'id 'conveyor_id'"

#: api.tcp_client.NiryoRobot.stop_conveyor:1 of
msgid "Stop conveyor at id 'conveyor_id'"
msgstr "Arrêter le convoyeur avec l'id 'conveyor_id'"

#: api.tcp_client.NiryoRobot.control_conveyor:1 of
msgid "Control conveyor at id 'conveyor_id'"
msgstr "Contrôler le convoyeur avec l'id 'conveyor_id'"

#: api.tcp_client.NiryoRobot.control_conveyor:7 of
msgid "New speed which is a percentage of maximum speed"
msgstr "Nouvelle vitesse qui est un pourcentage de la vitesse maximum"

#: api.tcp_client.NiryoRobot.control_conveyor:9 of
msgid "Conveyor direction"
msgstr "Direction du convoyeur"

#: api.tcp_client.NiryoRobot.get_connected_conveyors_id:1 of
msgid "List of the connected conveyors' ID"
msgstr "Liste des ID des convoyeurs connectés"

#: ../../source/api_doc/api.rst:162
msgid "Vision"
msgstr "Vision"

#: api.tcp_client.NiryoRobot.get_img_compressed:1 of
msgid ""
"Get image from video stream in a compressed format.  Use "
"``uncompress_image`` from the vision package to uncompress it"
msgstr ""
"Obtenir l'image du flux vidéo dans un format compressé. Utiliser "
"``uncompress_image`` du package vision pour les décompresser"

#: api.tcp_client.NiryoRobot.get_img_compressed:4 of
msgid "string containing a JPEG compressed image"
msgstr "Chaîne contenant une image JPEG compressée"

#: api.tcp_client.NiryoRobot.set_brightness:1 of
msgid "Modify video stream brightness"
msgstr "Modifie la luminosité du stream vidéo"

#: api.tcp_client.NiryoRobot.set_brightness:3 of
msgid ""
"How much to adjust the brightness. 0.5 will give a darkened image, 1 will "
"give the original image while 2 will enhance the brightness by a factor of 2."
msgstr ""
"Comment ajuster la luminosité: 0.5 donnera une image assombrie, 1 l'image "
"d'origine et 2 augmentera la luminosité par un facteur de 2."

#: api.tcp_client.NiryoRobot.set_contrast:1 of
msgid "Modify video stream contrast"
msgstr "Modifie le contraste du stream vidéo"

#: api.tcp_client.NiryoRobot.set_contrast:3 of
msgid ""
"While a factor of 1 gives original image. Making the factor towards 0 makes "
"the image greyer, while factor>1 increases the contrast of the image."
msgstr ""
"Un facteur de 1 équivaut à l'image d'origine. Plus le multiplicateur se "
"rapproche de 0 et plus l'image deviendra grise, \"tandis qu'un facteur > 1 "
"augmentera le contraste de l'image."

#: api.tcp_client.NiryoRobot.set_saturation:1 of
msgid "Modify video stream saturation"
msgstr "Modifie la saturation du stream vidéo"

#: api.tcp_client.NiryoRobot.set_saturation:3 of
msgid ""
"How much to adjust the saturation. 0 will give a black and white image, 1 "
"will give the original image while 2 will enhance the saturation by a factor "
"of 2."
msgstr ""
"Comment ajuster la saturation: 0 donnera une image en noir et blanc, 1 "
"équivaut à l'image d'origine, tandis que 2 va augmenter la saturation par un "
"facteur de 2."

#: api.tcp_client.NiryoRobot.get_image_parameters:1 of
msgid ""
"Get last stream image parameters: Brightness factor, Contrast factor, "
"Saturation factor."
msgstr ""
"Retourne les paramètres de la dernière image publiées: facteurs de "
"luminosité, contraste et saturation."

#: api.tcp_client.NiryoRobot.get_image_parameters:3 of
msgid ""
"Brightness factor: How much to adjust the brightness. 0.5 will give a "
"darkened image, 1 will give the original image while 2 will enhance the "
"brightness by a factor of 2."
msgstr ""
"Comment ajuster le facteur de luminosité: 0.5 donnera une image assombrie, 1 "
"l'image d'origine et 2 augmentera la luminosité par un facteur de 2."

#: api.tcp_client.NiryoRobot.get_image_parameters:6 of
msgid ""
"Contrast factor: A factor of 1 gives original image. Making the factor "
"towards 0 makes the image greyer, while factor>1 increases the contrast of "
"the image."
msgstr ""
"Comment ajuster le facteur de contraste: 1 équivaut à l'image d'origine. "
"Plus le multiplicateur se rapproche de 0 et plus l'image deviendra grise, "
"\"tandis qu'un facteur > 1 augmentera le contraste de l'image."

#: api.tcp_client.NiryoRobot.get_image_parameters:9 of
msgid ""
"Saturation factor: 0 will give a black and white image, 1 will give the "
"original image while 2 will enhance the saturation by a factor of 2."
msgstr ""
"Comment ajuster le facteur de saturation: 0 donnera une image en noir et "
"blanc, 1 équivaut à l'image d'origine, tandis que 2 va augmenter la "
"saturation par un facteur de 2."

#: api.tcp_client.NiryoRobot.get_image_parameters:12 of
msgid "Brightness factor, Contrast factor, Saturation factor"
msgstr "Facteur de luminosité, contraste et saturation"

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:1 of
msgid ""
"Given a pose (x_rel, y_rel, yaw_rel) relative to a workspace, this function "
"returns the robot pose in which the current tool will be able to pick an "
"object at this pose."
msgstr ""
"Pour une pose (x_rel, y_rel, yaw_rel) donnée relative à un workspace, cette "
"fonction retourne la position du robot dans laquelle l'outil actuel sera "
"capable d'attraper un objet."

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:4 of
msgid ""
"The height_offset argument (in m) defines how high the tool will hover over "
"the workspace. If height_offset = 0, the tool will nearly touch the "
"workspace."
msgstr ""
"L'argument height_offset (en mètres) définit à quelle hauteur l'outil va "
"passer au dessus du workspace. Si height_offset = 0, alors l'outil touchera "
"presque l'espace de travail."

#: api.tcp_client.NiryoRobot.detect_object:3
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:4
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:7
#: api.tcp_client.NiryoRobot.move_to_object:3
#: api.tcp_client.NiryoRobot.vision_pick:20 of
msgid "name of the workspace"
msgstr "Nom du workspace"

#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:6
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:9
#: api.tcp_client.NiryoRobot.move_to_object:5
#: api.tcp_client.NiryoRobot.vision_pick:22 of
msgid "offset between the workspace and the target height"
msgstr "Offset entre le workspace sa hauteur cible"

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:11 of
msgid "x relative pose (between 0 and 1)"
msgstr "pose relative de x (entre 0 et 1)"

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:13 of
msgid "y relative pose (between 0 and 1)"
msgstr "pose relative de y (entre 0 et 1)"

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:15 of
msgid "Angle in radians"
msgstr "Angle en radians"

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:18 of
msgid "target_pose"
msgstr "target_pose"

#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:1 of
msgid ""
"First detects the specified object using the camera and then returns the "
"robot pose in which the object can be picked with the current tool"
msgstr ""
"Commence par détecter l'objet spécifié en utilisant la caméra puis renvoie "
"la position du robot à laquelle l'objet peut être attrapé avec l'outil "
"utilisé."

#: api.tcp_client.NiryoRobot.detect_object:5
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:8
#: api.tcp_client.NiryoRobot.move_to_object:7
#: api.tcp_client.NiryoRobot.vision_pick:24 of
msgid "shape of the target"
msgstr "Forme de la cible"

#: api.tcp_client.NiryoRobot.detect_object:7
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:10
#: api.tcp_client.NiryoRobot.move_to_object:9
#: api.tcp_client.NiryoRobot.vision_pick:26 of
msgid "color of the target"
msgstr "Couleur de la cible"

#: api.tcp_client.NiryoRobot.detect_object:9
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:12 of
msgid "object_found, object_pose, object_shape, object_color"
msgstr "object_found, object_pose, object_shape, object_color"

#: api.tcp_client.NiryoRobot.vision_pick:1 of
msgid ""
"Picks the specified object from the workspace. This function has multiple "
"phases:"
msgstr ""
"Attrape l'objet spécifié sur le workspace. Cette fonction est composée de "
"plusieurs phases :"

#: api.tcp_client.NiryoRobot.vision_pick:3 of
msgid "1. detect object using the camera"
msgstr "\\1. détecte l'objet en utilisant la caméra"

#: api.tcp_client.NiryoRobot.vision_pick:4 of
msgid "2. prepare the current tool for picking"
msgstr "\\2. prépare l'outil utilisé pour la saisie"

#: api.tcp_client.NiryoRobot.vision_pick:5 of
msgid "3. approach the object"
msgstr "\\3. approche l'objet"

#: api.tcp_client.NiryoRobot.vision_pick:6 of
msgid "4. move down to the correct picking pose"
msgstr "\\4. descend jusque la bonne position de saisie"

#: api.tcp_client.NiryoRobot.vision_pick:7 of
msgid "5. actuate the current tool"
msgstr "\\5. actionne l'outil utilisé"

#: api.tcp_client.NiryoRobot.vision_pick:8 of
msgid "6. lift the object"
msgstr "\\6. soulève l'objet"

#: api.tcp_client.NiryoRobot.vision_pick:10 of
msgid "Example::"
msgstr "Exemple ::"

#: api.tcp_client.NiryoRobot.move_to_object:11
#: api.tcp_client.NiryoRobot.vision_pick:28 of
msgid "object_found, object_shape, object_color"
msgstr "object_found, object_shape, object_color"

#: api.tcp_client.NiryoRobot.move_to_object:1 of
msgid "Same as `get_target_pose_from_cam` but directly moves to this position"
msgstr ""
"Même fonction que `get_target_pose_from_cam` mais bouge directement à cette "
"position"

#: api.tcp_client.NiryoRobot.detect_object:1 of
msgid "Detect object in workspace and return its pose and characteristics"
msgstr ""
"Détecter l'objet sur le workspace et renvoyer sa position et ses "
"caractéristiques"

#: api.tcp_client.NiryoRobot.get_camera_intrinsics:1 of
msgid "Get calibration object: camera intrinsics, distortions coefficients"
msgstr ""
"Obtenir la calibration de l'objet : paramètres instrinsèques de la caméra, "
"taux de distorsion"

#: api.tcp_client.NiryoRobot.get_camera_intrinsics:3 of
msgid "camera intrinsics, distortions coefficients"
msgstr "paramètres instrinsèque de la caméra, taux de distorsion"

#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses:1 of
msgid ""
"Save workspace by giving the poses of the robot to point its 4 corners with "
"the calibration Tip. Corners should be in the good order. Markers' pose will "
"be deduced from these poses"
msgstr ""
"Sauvegarder le workspace en donnant au robot les 4 positions lui permettant "
"de pointer ses 4 coins avec la pointe de calibration. Les coins doivent être "
"dans le bon ordre. La position de ces marqueurs sera déduite de ces "
"positions."

#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses:5 of
msgid ""
"Poses should be either a list [x, y, z, roll, pitch, yaw] or a PoseObject"
msgstr ""
"Les positions peuvent également être une liste [x, y, z, roll, pitch, yaw] "
"ou un PoseObject."

#: api.tcp_client.NiryoRobot.save_workspace_from_points:4
#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses:7 of
msgid "workspace name, maximum lenght 30 char."
msgstr "nom du workspace, maximum 30 caractères"

#: api.tcp_client.NiryoRobot.save_workspace_from_points:1 of
msgid ""
"Save workspace by giving the points of worskpace's 4 corners. Points are "
"written as [x, y, z] Corners should be in the good order."
msgstr ""
"Sauvegarder le workspace en donnant les points des 4 coins du workspaces. "
"Ces points sont écrits [x, y, z]. Les coins doivent être dans le bon ordre."

#: api.tcp_client.NiryoRobot.delete_workspace:1 of
msgid "Delete workspace from robot's memory"
msgstr "Supprimer le workspace de la mémoire du robot"

#: api.tcp_client.NiryoRobot.get_workspace_ratio:1 of
msgid "Get workspace ratio from robot's memory"
msgstr "Obtenir le ratio du workspace depuis la mémoire du robot"

#: api.tcp_client.NiryoRobot.get_workspace_list:1 of
msgid "Get list of workspaces' name store in robot's memory"
msgstr ""
"Obtenir la liste des noms des workspaces stockés dans la mémoire du robot"

#: ../../source/api_doc/api.rst:182
msgid "Led Ring"
msgstr "Anneau Led"

#: api.tcp_client.NiryoRobot.set_led_color:1 of
msgid "Lights up an LED in one colour. RGB colour between 0 and 255."
msgstr "Allume une LED d'une seule couleur. Couleur RVB entre 0 et 255."

#: api.tcp_client.NiryoRobot.set_led_color:7 of
msgid "Id of the led: between 0 and 29"
msgstr "ID de la LED: entre 0 et 29"

#: api.tcp_client.NiryoRobot.led_ring_breath:9
#: api.tcp_client.NiryoRobot.led_ring_chase:10
#: api.tcp_client.NiryoRobot.led_ring_flashing:13
#: api.tcp_client.NiryoRobot.led_ring_go_up:10
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:10
#: api.tcp_client.NiryoRobot.led_ring_snake:8
#: api.tcp_client.NiryoRobot.led_ring_solid:7
#: api.tcp_client.NiryoRobot.led_ring_wipe:9
#: api.tcp_client.NiryoRobot.set_led_color:9 of
msgid "Led color in a list of size 3[R, G, B]. RGB channels from 0 to 255."
msgstr ""
"Couleur du led dans une liste de taille 3[R, G, B]. Les canaux RVB ont une "
"valeur comprise entre 0 et 255."

#: api.tcp_client.NiryoRobot.led_ring_solid:1 of
msgid "Set the whole Led Ring to a fixed color."
msgstr "Réglez l'ensemble de l'anneau LED sur une couleur fixe."

#: api.tcp_client.NiryoRobot.led_ring_turn_off:1 of
msgid "Turn off all LEDs"
msgstr "Éteignez toutes les LED"

#: api.tcp_client.NiryoRobot.led_ring_flashing:1 of
msgid ""
"Flashes a color according to a frequency. The frequency is equal to 1 / "
"period."
msgstr ""
"Clignote d'une couleur selon une fréquence. La fréquence est égaleà "
"1/période."

#: api.tcp_client.NiryoRobot.led_ring_alternate:3
#: api.tcp_client.NiryoRobot.led_ring_breath:3
#: api.tcp_client.NiryoRobot.led_ring_chase:3
#: api.tcp_client.NiryoRobot.led_ring_flashing:3
#: api.tcp_client.NiryoRobot.led_ring_go_up:3
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:3
#: api.tcp_client.NiryoRobot.led_ring_rainbow:3
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:3
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:3
#: api.tcp_client.NiryoRobot.led_ring_snake:3
#: api.tcp_client.NiryoRobot.led_ring_wipe:3 of
msgid "Examples: ::"
msgstr "Exemple ::"

#: api.tcp_client.NiryoRobot.led_ring_alternate:17
#: api.tcp_client.NiryoRobot.led_ring_breath:11
#: api.tcp_client.NiryoRobot.led_ring_chase:12
#: api.tcp_client.NiryoRobot.led_ring_flashing:15
#: api.tcp_client.NiryoRobot.led_ring_go_up:12
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:12
#: api.tcp_client.NiryoRobot.led_ring_rainbow:9
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:9
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:9
#: api.tcp_client.NiryoRobot.led_ring_wipe:11 of
msgid ""
"Execution time for a pattern in seconds. If 0, the default time will be used."
msgstr ""
"Temps d'exécution d'un motif en secondes. Si 0, la période par défautsera "
"utilisée."

#: api.tcp_client.NiryoRobot.led_ring_flashing:17 of
msgid "Number of consecutive flashes. If 0, the Led Ring flashes endlessly."
msgstr ""
"Nombre de clignotements consécutifs. Si 0, la Led Ring clignoteindéfiniment."

#: api.tcp_client.NiryoRobot.led_ring_alternate:21
#: api.tcp_client.NiryoRobot.led_ring_chase:17
#: api.tcp_client.NiryoRobot.led_ring_flashing:19 of
msgid ""
"The service wait for the animation to finish all iterations or not to "
"answer. If iterations is 0, the service answers immediately."
msgstr ""
"Le service attend que l'animation termine toutes les itérationsou ne réponde "
"pas. Si le nombre d'itérations vaut 0, le service répond immédiatement."

#: api.tcp_client.NiryoRobot.led_ring_alternate:1 of
msgid "Several colors are alternated one after the other."
msgstr "Plusieurs couleurs s'alternéent les unes après les autres."

#: api.tcp_client.NiryoRobot.led_ring_alternate:15 of
msgid "Led color list of lists of size 3[R, G, B]. RGB channels from 0 to 255."
msgstr ""
"Liste des couleurs des leds de taille 3[R, G, B]. Canaux RVBde 0 à 255."

#: api.tcp_client.NiryoRobot.led_ring_alternate:19 of
msgid ""
"Number of consecutive alternations. If 0, the Led Ring alternates endlessly."
msgstr ""
"Nombre d'alternances consécutives. Si 0, le Led Ring alterneindéfiniment."

#: api.tcp_client.NiryoRobot.led_ring_chase:1 of
msgid "Movie theater light style chaser animation."
msgstr "Animation de **Chase** de style lumière de cinéma."

#: api.tcp_client.NiryoRobot.led_ring_chase:14 of
msgid ""
"Number of consecutive chase. If 0, the animation continues endlessly. One "
"chase just lights one Led every 3 LEDs."
msgstr ""
"Nombre de poursuites consécutives. Si 0, l'animation continueindéfiniment. "
"Un **Chase** allume juste une LED sur 3."

#: api.tcp_client.NiryoRobot.led_ring_wipe:1 of
msgid "Wipe a color across the Led Ring, light a Led at a time."
msgstr "Essuyez une couleur sur l'anneau LED, allume une LED à la fois."

#: api.tcp_client.NiryoRobot.led_ring_wipe:13 of
msgid "The service wait for the animation to finish or not to answer."
msgstr "Le service attend que l'animation se termine ou ne réponde pas."

#: api.tcp_client.NiryoRobot.led_ring_rainbow:1 of
msgid "Draw rainbow that fades across all LEDs at once."
msgstr "Dessinez un arc-en-ciel qui s'estompe sur toutes les LED à lafois."

#: api.tcp_client.NiryoRobot.led_ring_rainbow:11 of
msgid ""
"Number of consecutive rainbows. If 0, the animation continues endlessly."
msgstr ""
"Nombre d'arcs-en-ciel consécutifs. Si 0, l'animation continueindéfiniment."

#: api.tcp_client.NiryoRobot.led_ring_breath:16
#: api.tcp_client.NiryoRobot.led_ring_go_up:17
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:17
#: api.tcp_client.NiryoRobot.led_ring_rainbow:13
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:13
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:13
#: api.tcp_client.NiryoRobot.led_ring_snake:15 of
msgid ""
"The service wait for the animation to finish or not to answer. If iterations "
"is 0, the service answers immediately."
msgstr ""
"Le service attend que l'animation se termine ou ne réponde pas.Si itérations "
"vaut 0, le service répond immédiatement."

#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:1 of
msgid "Draw rainbow that uniformly distributes itself across all LEDs."
msgstr ""
"Dessinez un arc-en-ciel qui se répartit uniformément sur toutesles LED."

#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:11
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:11 of
msgid ""
"Number of consecutive rainbow cycles. If 0, the animation continues "
"endlessly."
msgstr ""
"Nombre de cycles arc-en-ciel consécutifs. Si 0, l'animation "
"continueindéfiniment."

#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:1 of
msgid "Rainbow chase animation, like the led_ring_chase method."
msgstr "Animation de **Chase** arc-en-ciel, comme la méthode led_ring_chase."

#: api.tcp_client.NiryoRobot.led_ring_go_up:1 of
msgid ""
"LEDs turn on like a loading circle, and are then all turned off at once."
msgstr ""
"Les LED s'allument comme un cercle de chargement, puis s'éteignenttoutes en "
"même temps."

#: api.tcp_client.NiryoRobot.led_ring_breath:13
#: api.tcp_client.NiryoRobot.led_ring_go_up:14
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:14
#: api.tcp_client.NiryoRobot.led_ring_snake:12 of
msgid ""
"Number of consecutive turns around the Led Ring. If 0, the animation "
"continues endlessly."
msgstr ""
"Nombre de tours consécutifs autour du Led Ring. Si 0, l'animationcontinue "
"indéfiniment."

#: api.tcp_client.NiryoRobot.led_ring_go_up_down:1 of
msgid "LEDs turn on like a loading circle, and are turned off the same way."
msgstr ""
"Les LED s'allument comme un cercle de chargement et s'éteignentde la même "
"manière."

#: api.tcp_client.NiryoRobot.led_ring_breath:1 of
msgid ""
"Variation of the light intensity of the LED ring, similar to human breathing."
msgstr ""
"Variation de l'intensité lumineuse de l'anneau LED, similaireà la "
"respiration humaine."

#: api.tcp_client.NiryoRobot.led_ring_snake:1 of
msgid ""
"A small coloured snake (certainly a python :D ) runs around the LED ring."
msgstr ""
"Un petit serpent coloré (certainement un python :D ) court autourde l'anneau "
"LED."

#: api.tcp_client.NiryoRobot.led_ring_snake:10 of
msgid ""
"Execution time for a pattern in seconds. If 0, the default duration will be "
"used."
msgstr ""
"Temps d'exécution d'un motif en secondes. Si 0, la durée pardéfaut sera "
"utilisée."

#: api.tcp_client.NiryoRobot.led_ring_custom:1 of
msgid ""
"Sends a colour command to all LEDs of the LED ring. The function expects a "
"list of colours for the 30 LEDs  of the robot."
msgstr ""
"Envoie une commande de couleur à toutes les LED de l'anneau LED.La fonction "
"attend une liste de couleurs pour les 30 LED du robot."

#: api.tcp_client.NiryoRobot.led_ring_custom:9 of
msgid ""
"List of size 30 of led color in a list of size 3[R, G, B]. RGB channels from "
"0 to 255."
msgstr ""
"Liste de taille 30 de couleur led dans une liste de taille 3[R,G, B]. La "
"valeur des canaux RVB est comprise entre de 0 et 255."

#: ../../source/api_doc/api.rst:200
msgid "Sound"
msgstr "Son"

#: api.tcp_client.NiryoRobot.get_sounds:1 of
msgid "Get sound name list"
msgstr "Obtenir la liste des noms de son"

#: api.tcp_client.NiryoRobot.get_sounds:3 of
msgid "list of the sounds of the robot"
msgstr "liste des sons du robot"

#: api.tcp_client.NiryoRobot.play_sound:1 of
msgid "Play a sound from the robot"
msgstr "Jouer un son du robot"

#: api.tcp_client.NiryoRobot.play_sound:3 of
msgid "Name of the sound to play"
msgstr "Nom du son à jouer"

#: api.tcp_client.NiryoRobot.play_sound:5 of
msgid "wait for the end of the sound before exiting the function"
msgstr "attendre la fin du son avant de quitter la fonction"

#: api.tcp_client.NiryoRobot.play_sound:7 of
msgid "start the sound from this value in seconds"
msgstr "démarrer le son à partir de cette valeur en secondes"

#: api.tcp_client.NiryoRobot.play_sound:9 of
msgid "end the sound at this value in seconds"
msgstr "terminer le son à cette valeur en secondes"

#: api.tcp_client.NiryoRobot.set_volume:1 of
msgid "Set the volume percentage of the robot."
msgstr "Réglez le pourcentage de volume du robot."

#: api.tcp_client.NiryoRobot.set_volume:3 of
msgid "volume percentage of the sound (0: no sound, 100: max sound)"
msgstr "pourcentage de volume du son (0 : pas de son, 100 : son maximum)"

#: api.tcp_client.NiryoRobot.stop_sound:1 of
msgid "Stop a sound being played."
msgstr "Arrête un son en cours de lecture."

#: api.tcp_client.NiryoRobot.get_sound_duration:1 of
msgid ""
"Returns the duration in seconds of a sound stored in the robot database "
"raise SoundRosWrapperException if the sound doesn't exists"
msgstr ""
"Renvoie la durée en secondes d'un son stocké dans la base dedonnées du "
"robot. Lève SoundRosWrapperException si le son n'existepas"

#: api.tcp_client.NiryoRobot.get_sound_duration:4 of
msgid "name of sound"
msgstr "nom du son"

#: api.tcp_client.NiryoRobot.get_sound_duration:6 of
msgid "sound duration in seconds"
msgstr "durée du son en secondes"

#: api.tcp_client.NiryoRobot.say:1 of
msgid ""
"Use gtts (Google Text To Speech) to interprete a string as sound Languages "
"available are: * English: 0 * French: 1 * Spanish: 2 * Mandarin: 3 * "
"Portuguese: 4"
msgstr ""
"Utilisez gtts (Google Text To Speech) pour interpréter une chaîne de "
"caractèrescomme un son.  Les langues disponibles sont : * Anglais : 0 * "
"Français: 1 * Espagnol : 2 * Mandarin : 3 * Portugais : 4"

#: api.tcp_client.NiryoRobot.say:9 of
msgid "Example ::"
msgstr "Exemple ::"

#: api.tcp_client.NiryoRobot.say:15 of
msgid "Text that needs to be spoken < 100 char"
msgstr "Texte qui doit être prononcé < 100 caractères"

#: api.tcp_client.NiryoRobot.say:17 of
msgid "language of the text"
msgstr "Langage du texte"

#: ../../source/api_doc/api.rst:211
msgid "Enums"
msgstr "Enums (énumérations)"

#: ../../source/api_doc/api.rst:213
msgid "Enums are used to pass specific parameters to functions."
msgstr ""
"Les énumérations sont utilisées pour passer des paramètres spécifiques aux "
"fonctions."

#: ../../source/api_doc/api.rst:215
msgid ""
"For instance, :meth:`~.api.tcp_client.NiryoRobot.shift_pose` will need a "
"parameter from :class:`~.api.objects.RobotAxis` enum ::"
msgstr ""
"Par exemple, :meth:`~.api.tcp_client.NiryoRobot.shift_pose` aura besoin d'un "
"paramètre de type l'enum :class:`~.api.objects.RobotAxis` ::"

#: ../../source/api_doc/api.rst:221
msgid "List of enums:"
msgstr "Liste des énumérations "

#: ../../source/api_doc/api.rst:223
msgid ":class:`~.api.enums_communication.CalibrateMode`"
msgstr ":class:`~.api.enums_communication.CalibrateMode`"

#: ../../source/api_doc/api.rst:224
msgid ":class:`~.api.enums_communication.RobotAxis`"
msgstr ":class:`~.api.enums_communication.RobotAxis`"

#: ../../source/api_doc/api.rst:225
msgid ":class:`~.api.enums_communication.ToolID`"
msgstr ":class:`~.api.enums_communication.ToolID`"

#: ../../source/api_doc/api.rst:226
msgid ":class:`~.api.enums_communication.PinMode`"
msgstr ":class:`~.api.enums_communication.PinMode`"

#: ../../source/api_doc/api.rst:227
msgid ":class:`~.api.enums_communication.PinState`"
msgstr ":class:`~.api.enums_communication.PinState`"

#: ../../source/api_doc/api.rst:228
msgid ":class:`~.api.enums_communication.PinID`"
msgstr ":class:`~.api.enums_communication.PinID`"

#: ../../source/api_doc/api.rst:229
msgid ":class:`~.api.enums_communication.ConveyorID`"
msgstr ":class:`~.api.enums_communication.ConveyorID`"

#: ../../source/api_doc/api.rst:230
msgid ":class:`~.api.enums_communication.ConveyorDirection`"
msgstr ":class:`~.api.enums_communication.ConveyorDirection`"

#: ../../source/api_doc/api.rst:231
msgid ":class:`~.api.enums_communication.ObjectColor`"
msgstr ":class:`~.api.enums_communication.ObjectColor`"

#: ../../source/api_doc/api.rst:232
msgid ":class:`~.api.enums_communication.ObjectShape`"
msgstr ":class:`~.api.enums_communication.ObjectShape`"

#: api.enums_communication.CalibrateMode:1 of
msgid "Enumeration of Calibration Modes"
msgstr "Énumération des modes de calibration"

#: api.enums_communication.RobotAxis:1 of
msgid "Enumeration of Robot Axis : it used for Shift command"
msgstr "Énumération des axes du robot : utilisé pour la commande shift"

#: api.enums_communication.ToolID:1 of
msgid "Enumeration of Tools IDs"
msgstr "Énumération des ID des outils"

#: api.enums_communication.PinMode:1 of
msgid "Enumeration of Pin Modes"
msgstr "Énumération des modes des broches"

#: api.enums_communication.PinState:1 of
msgid "Pin State is either LOW or HIGH"
msgstr "L'état des broches est soit LOW ou HIGH"

#: api.enums_communication.PinID:1 of
msgid "Enumeration of Robot Pins"
msgstr "Énumération des broches du robot"

#: api.enums_communication.ConveyorID:1 of
msgid "Enumeration of Conveyor IDs used for Conveyor control"
msgstr "Énumération des ID du convoyeur utilisés pour le contrôle du convoyeur"

#: api.enums_communication.ConveyorDirection:1 of
msgid "Enumeration of Conveyor Directions used for Conveyor control"
msgstr ""
"Énumération des directions du convoyeur utilisés pour le contrôle du "
"convoyeur"

#: api.enums_communication.ObjectColor:1 of
msgid "Enumeration of Colors available for image processing"
msgstr "Énumération des couleurs disponibles pour le traitement d'images"

#: api.enums_communication.ObjectShape:1 of
msgid "Enumeration of Shapes available for image processing"
msgstr "Énumération des formes disponibles pour le traitement d'images"

#: ../../source/api_doc/api.rst:245
msgid "Python object classes"
msgstr "Classes d'objets Python"

#: ../../source/api_doc/api.rst:247
msgid "Special objects"
msgstr "Objets spéciaux"

#: api.objects.PoseObject:1 of
msgid "Pose object which stores x, y, z, roll, pitch & yaw parameters"
msgstr "Pose object qui stocke les paramètres x, y, z, roll, pitch & yaw"

#: api.objects.PoseObject.copy_with_offsets:1 of
msgid "Create a new pose from copying from copying actual pose with offsets"
msgstr ""
"Créer une nouvelle position en copiant a position actuelle avec des offsets "

#: api.objects.PoseObject.to_list:1 of
msgid ""
"Return a list [x, y, z, roll, pitch, yaw] corresponding to the pose's "
"parameters"
msgstr ""
"Retourne une liste [x, y, z, roll, pitch, yaw] correspondant aux paramètres "
"de la position."

#: api.objects.HardwareStatusObject:1 of
msgid "Object used to store every hardware information"
msgstr "Objet utilisé pour stocker toutes les informations matérielles"

#: api.objects.AnalogPinObject:1 api.objects.DigitalPinObject:1 of
msgid "Object used to store information on digital pins"
msgstr ""
"Objet utilisé pour stocker toutes les informations relatives aux digital pins"

#~ msgid ""
#~ ":param frame_name : name of local frame :type frame_name: str :param "
#~ "offset: list which contains offset of x, y, z, roll, pitch, yaw :type "
#~ "offset: list[float] :return: status, message :rtype: (int, str)"
#~ msgstr ""

#~ msgid "pose of a frame"
#~ msgstr "position d'un repère"
