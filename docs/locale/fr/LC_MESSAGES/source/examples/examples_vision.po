# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the PyNiryo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: PyNiryo 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-29 12:34+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/examples/examples_vision.rst:2
msgid "Examples: Vision"
msgstr "Exemples : Vision"

#: ../../source/examples/examples_vision.rst:4
msgid "This page shows how to use Ned's Vision Set."
msgstr "Cette page vous montre comment utiliser le Set Vision de Ned."

#: ../../source/examples/examples_vision.rst:7
msgid ""
"If you want to see more about Ned's Vision functions, you can look at "
":ref:`PyNiryo - Vision<source/api_doc/api:Vision>`"
msgstr ""
"Si vous souhaitez en apprendre davantage sur les fonctions de Vision de "
"Ned, consultez la rubrique :ref:`PyNiryo - Vision<source/api_doc/api:Vision>`. ::"

#: ../../source/examples/examples_vision.rst:9
msgid ""
"If you want to see how to do Image Processing, go check out the "
":doc:`Image Processing section<../vision/image_processing_overview>`."
msgstr ""
"Si vous souhaitez apprendre à faire du traitement d'images, consultez la "
":doc:`section traitement d'images<../vision/image_processing_overview>`."

#: ../../source/examples/examples_vision.rst:12
msgid ""
"Even if you do not own a Vision Set, you can still realize these examples"
" with the Gazebo simulation version."
msgstr ""
"Si vous ne possédez pas le Set Vision, vous pouvez toutefois réaliser ces"
" exemples avec la simulation Gazebo."

#: ../../source/examples/examples_vision.rst:16
msgid ""
"If you are using the real robot, make sure the environment around it is "
"clear."
msgstr ""
"Si vous utilisez le robot, assurez vous que l'environnement autour de "
"celui-ci est dégagé"

#: ../../source/examples/examples_vision.rst:20
msgid "Needed piece of code"
msgstr "Parties de code nécessaires"

#: ../../source/examples/examples_vision.rst:22
msgid ""
"In order to achieve the following examples, you need to create a vision "
"workspace. In this page, the workspace used is named ``workspace_1``. To "
"create it, the user should go on Niryo Studio!"
msgstr ""
"Afin de réaliser les exemples suivants, vous devez créer un workspace "
"pour la vision. Dans ces exemples, le workspace utilisé est appelé "
"``workspace_1``. Afin de le créer, vous devez vous rendre sur Niryo "
"Studio."

#: ../../source/examples/examples_vision.rst:26
msgid ""
"As the examples start always the same, add the following lines at the "
"beginning of codes::"
msgstr ""
"Puisque tous les exemples commencent de la même manière, ajoutez les "
"lignes suivantes au début de vos codes : ::"

#: ../../source/examples/examples_vision.rst:62
msgid ""
"All the following examples are only a part of what can be made with the "
"API in terms of Vision. We advise you to look at :ref:`API - "
"Vision<source/api_doc/api:Vision>` to understand more deeply"
msgstr ""
"Les exemples suivants ne sont qu'une petite partie de ce qui peut être "
"fait avec l'API en termes de Vision. Nous vous recommandons de vous "
"référer à la fonction de la commande :ref:`API - Vision<source/api_doc/api:Vision>` afin d'en apprendre "
"davantage."

#: ../../source/examples/examples_vision.rst:67
msgid "Simple Vision Pick & Place"
msgstr "Simple Pick & Place par la Vision"

#: ../../source/examples/examples_vision.rst:68
msgid ""
"The goal of a Vision Pick & Place is the same as a classical Pick & "
"Place, with a close difference: the camera detects where the robot has to"
" go in order to pick!"
msgstr ""
"L'objectif d'un Pick & Place par la Vision est le même qu'avec un Pick & "
"Place classique, avec une légère différence : la caméra détecte où le "
"robot doit se rendre pour attraper !"

#: ../../source/examples/examples_vision.rst:71
msgid ""
"This short example shows how to do your first Vision pick using the "
":meth:`~.api.tcp_client.NiryoRobot.vision_pick` function: ::"
msgstr ""
"Ce court exemple vous montre comment réaliser votre premier prélèvement "
"par la Vision en utilisant la fonction "
":meth:`~.api.tcp_client.NiryoRobot.vision_pick`. ::"

#: ../../source/examples/examples_vision.rst:85
msgid "Code Details - Simple Vision Pick and Place"
msgstr "Détails du code - Simple Pick & Place par la Vision"

#: ../../source/examples/examples_vision.rst:87
msgid ""
"To execute a Vision pick, we firstly need to go to a place where the "
"robot will be able to see the workspace::"
msgstr ""
"Pour exécuter un prélèvement par la Vision, nous avons tout d'abord "
"besoin de nous rendre à l'endroit depuis lequel le robot est capable de "
"voir le workspace : ::"

#: ../../source/examples/examples_vision.rst:92
msgid ""
"Then, we try to perform a Vision pick in the workspace with the "
":meth:`~.api.tcp_client.NiryoRobot.vision_pick` function: ::"
msgstr ""
"Ensuite, on essaye de réaliser un prélèvement par la Vision sur le "
"workspace en appelant la fonction "
":meth:`~.api.tcp_client.NiryoRobot.vision_pick` : ::"

#: ../../source/examples/examples_vision.rst:98
msgid ""
"Variables ``shape_ret`` and ``color_ret`` are respectively of type "
":class:`~.api.enums_communication.ObjectShape` and "
":class:`~.api.enums_communication.ObjectColor`, and store the shape and "
"the color of the detected object! We will not use them for this first "
"example."
msgstr ""
"Les variables ``shape_ret`` et ``color_ret`` sont respectivement de type "
":class:`~.api.enums_communication.ObjectShape` et "
":class:`~.api.enums_communication.ObjectColor`, et enregistrent la forme "
"et la couleur des objets détectés. Nous n'allons pas les utiliser pour ce"
" premier exemple."

#: ../../source/examples/examples_vision.rst:103
msgid ""
"The ``obj_found`` variable is a boolean which indicates whereas an object"
" has been found and picked, or not. Thus, if the pick worked, we can "
"place the object at the place pose. ::"
msgstr ""
"La variable ``obj_found`` est un booléen qui indique si un objet a été "
"détecté et attrapé, ou non. Ainsi, si le prélèvement a été réussi, on "
"peut placer l'objet à la position de placement."

#: ../../source/examples/examples_vision.rst:110
msgid "Finally, we turn learning mode on::"
msgstr "Enfin, on active le mode apprentissage : ::"

#: ../../source/examples/examples_vision.rst:116
msgid "If your ``obj_found`` variable indicates ``False``, check that:"
msgstr "Si votre variable ``obj_found`` indique ``False``, vérifiez que :"

#: ../../source/examples/examples_vision.rst:118
msgid "Nothing obstructs the camera field of view"
msgstr "Rien n'obstrue le champs de vision de la caméra;"

#: ../../source/examples/examples_vision.rst:119
msgid "Workspace's 4 markers are visible"
msgstr "Les 4 marqueurs du workspace sont visibles;"

#: ../../source/examples/examples_vision.rst:120
msgid "At least 1 object is placed fully inside the workspace"
msgstr "Au moins un objet est entièrement placé sur le workspace."

#: ../../source/examples/examples_vision.rst:123
msgid "First conditioning via Vision"
msgstr "Premier conditionnement par la Vision"

#: ../../source/examples/examples_vision.rst:124
msgid ""
"In most of use cases, the robot will need to perform more than one Pick &"
" Place. In this example, we will see how to condition multiple objects "
"according to a straight line: ::"
msgstr ""
"Dans la plupart des cas d'usage, le robot devra faire plus d'un Pick & "
"Place. Dans cet exemple, nous verrons comment conditionner plusieurs "
"objets selon une ligne droite : ::"

#: ../../source/examples/examples_vision.rst:155
msgid "Code Details - First Conditioning via Vision"
msgstr "Détails du code - Premier conditionnement par la Vision"

#: ../../source/examples/examples_vision.rst:157
msgid ""
"We want to catch ``max_catch_count`` objects, and space each of them by "
"``offset_size`` meter: ::"
msgstr ""
"Nous souhaitons attraper le nombre d'objets indiqués dans "
"``max_catch_count``, et espacer chacun d'entre eux d'une distance en "
"mètre indiquée dans ``offset_size`` ::"

#: ../../source/examples/examples_vision.rst:163
msgid "We start a loop until the robot has caught ``max_catch_count`` objects: ::"
msgstr ""
"Nous démarrons une boucle jusqu'à ce que le robot a attrapé le nombre "
"d'objets indiqués dans ``max_catch_count`` : ::"

#: ../../source/examples/examples_vision.rst:168
msgid ""
"For each iteration, we firstly go to the observation pose and then, try "
"to make a Vision pick in the workspace: ::"
msgstr ""
"Pour toutes les itérations, nous commençons par aller en position "
"d'observation puis nous essayons de faire un prélèvement par Vision sur "
"le workspace : ::"

#: ../../source/examples/examples_vision.rst:176
msgid ""
"If the Vision pick failed, we wait 0.1 second and then, start a new "
"iteration: ::"
msgstr ""
"Si le prélèvement par Vision a échoué, nous attendons 0.1 seconde et "
"commençons une nouvelle itération : ::"

#: ../../source/examples/examples_vision.rst:182
msgid ""
"Else, we compute the new place position according to the number of "
"catches, and then, go placing the object at that place: ::"
msgstr ""
"Autrement, nous calculons une nouvelle position en fonction du nombre de "
"saisies puis plaçons l'objet à cette position : ::"

#: ../../source/examples/examples_vision.rst:188
msgid "We also increment the ``catch_count`` variable::"
msgstr "Nous incrémentons également la variable ``catch_count`` : ::"

#: ../../source/examples/examples_vision.rst:192
#: ../../source/examples/examples_vision.rst:313
msgid "Once the target catch number is achieved, we go to sleep: ::"
msgstr ""
"Une fois le nombre de saisies voulues atteint, le robot retourne en "
"position de repos :"

#: ../../source/examples/examples_vision.rst:198
msgid "Multi Reference Conditioning"
msgstr "Conditionnement multi-références"

#: ../../source/examples/examples_vision.rst:199
msgid ""
"During a conditioning task, objects may not always be placed as the same "
"place according to their type. In this example, we will see how to align "
"object according to their color, using the color element "
":class:`~.api.enums_communication.ObjectColor` returned by "
":meth:`~.api.tcp_client.NiryoRobot.vision_pick` function::"
msgstr ""
"Pendant une tâche de conditionnement, les objets peuvent ne pas être "
"placés au même endroit en fonction de leur type. Dans cet exemple, nous "
"vous montrerons comment aligner des objets en fonction de leur couleur, "
"en utilisation l'élément :class:`~.api.enums_communication.ObjectColor` "
"renvoyé par la fonction :meth:`~.api.tcp_client.NiryoRobot.vision_pick`. "
"::"

#: ../../source/examples/examples_vision.rst:253
msgid "Code Details - Multi Reference Conditioning"
msgstr "Détails du code - conditionnement multi-références"

#: ../../source/examples/examples_vision.rst:255
msgid ""
"We want to catch objects until Vision Pick failed ``max_failure_count`` "
"times. Each of the object will be put on a specific column according to "
"its color. The number of catches for each color will be stored on a "
"dictionary ``count_dict``. ::"
msgstr ""
"Nous souhaitons attraper des objets jusqu'à ce que le prélèvement par "
"Vision échoue autant de fois qu'indiquées dans ``max_failure_count``. "
"Tous les objets seront placés dans une colonne spécifique en fonction de "
"leur couleur. Le nombre de saisies pour chaque objet sera stocké dans le "
"dictionnaire ``count_dict``. ::"

#: ../../source/examples/examples_vision.rst:274
msgid ""
"For each iteration, we firstly go to the observation pose and then, try "
"to make a Vision pick in the workspace::"
msgstr ""
"Pour chaque itération, nous commençons par aller en position "
"d'observation puis nous essayons de réaliser un prélèvement par la Vision"
" sur le workspace : ::"

#: ../../source/examples/examples_vision.rst:281
msgid ""
"If the Vision pick failed, we wait 0.1 second and then, start a new "
"iteration, without forgetting to increment the failure counter::"
msgstr ""
"Si le prélèvement par Vision a échoué, nous attendons 0.1 seconde et "
"commençons une nouvelle itération, en n'oubliant pas d'incrémenter un "
"compteur d'erreurs : ::"

#: ../../source/examples/examples_vision.rst:289
msgid ""
"Else, we compute the new place position according to the number of "
"catches, and then, go place the object at that place::"
msgstr ""
"Autrement, nous calculons une nouvelle position en fonction du nombre de "
"saisies puis plaçons l'objet à cette position : ::"

#: ../../source/examples/examples_vision.rst:308
msgid ""
"We increment the ``count_dict`` dictionary and reset "
"``try_without_success``: ::"
msgstr ""
"Nous incrémentons le dictionnaire ``count_dict`` et réinitialisons "
"``try_without_success`` : ::"

#: ../../source/examples/examples_vision.rst:318
msgid "Sorting Pick with Conveyor"
msgstr "Tri avec le convoyeur"

#: ../../source/examples/examples_vision.rst:320
msgid ""
"An interesting way to bring objects to the robot, is the use of a "
"Conveyor Belt. In this examples, we will see how to catch only a certain "
"type of object by stopping the conveyor as soon as the object is detected"
" on the workspace. ::"
msgstr ""
"Utiliser un convoyeur est une façon intéressante d'amener des objets au "
"robot. Dans ces exemples, nous vous montrerons comment attraper "
"uniquement un certain type d'objets en arrêtant le convoyeur dès que "
"l'objet est détecté sur le workspace. ::"

#: ../../source/examples/examples_vision.rst:367
msgid "Code Details - Sort Picking"
msgstr "Détails du code - Tri"

#: ../../source/examples/examples_vision.rst:369
msgid ""
"Firstly, we initialize your process: we want the robot to catch 4 red "
"circles. To do so, we set variables ``shape_expected`` and "
"``color_expected`` with :attr:`ObjectShape.CIRCLE "
"<api.enums_communication.ObjectShape.CIRCLE>` and :attr:`ObjectColor.RED "
"<api.enums_communication.ObjectColor.RED>`. ::"
msgstr ""
"Pour commencer, initialisons votre process : nous voulons que le robot "
"attrape 4 cercles rouges. Pour cela, nous définissons les variables "
"``shape_expected`` et ``color_expected`` avec :attr:`ObjectShape.CIRCLE "
"<api.enums_communication.ObjectShape.CIRCLE>` et :attr:`ObjectColor.RED "
"<api.enums_communication.ObjectColor.RED>` : ::"

#: ../../source/examples/examples_vision.rst:379
msgid ""
"We activate the connection with the Conveyor Belt and start a loop until "
"the robot has caught ``max_catch_count`` objects::"
msgstr ""
"Nous activons ensuite la connexion avec le convoyeur et démarrons une "
"boucle jusqu'à ce que le robot a attrapé le nombre d'objets indiqués dans"
" ``max_catch_count`` : ::"

#: ../../source/examples/examples_vision.rst:387
msgid ""
"For each iteration, we firstly run the Conveyor Belt (if the latter is "
"already running, nothing will happen), then go to the observation pose::"
msgstr ""
"Pour toutes les itérations, nous débutons par lancer le Convoyeur (si ce "
"dernier est déjà lancé, alors rien ne se passera), puis nous allons en "
"position d'observation : ::"

#: ../../source/examples/examples_vision.rst:395
msgid ""
"We then check if an object corresponding to our criteria is in the "
"workspace. If not, we wait 0.5 second and then, start a new iteration::"
msgstr ""
"Nous vérifions ensuite si un objet répondant à notre critère est présent "
"sur le workspace. Si non, nous attendons 0.5 secondes et démarrons alors "
"une nouvelle itération : ::"

#: ../../source/examples/examples_vision.rst:405
msgid "Else, stop the Conveyor Belt and try to make a Vision pick::"
msgstr ""
"Sinon, nous stoppons le convoyeur et essayons de réaliser un prélèvement "
"par la Vision :"

#: ../../source/examples/examples_vision.rst:416
msgid "If Vision Pick succeed, compute new place pose, and place the object::"
msgstr ""
"Si le prélèvement par la vision est réusi, nous calculons une nouvelle "
"position et y plaçons l'objet : ::"

#: ../../source/examples/examples_vision.rst:424
msgid ""
"Once the target catch number is achieved, we stop the Conveyor Belt and "
"go to sleep::"
msgstr ""
"Une fois le nombre de saisies voulues atteint, nous arrêtons le convoyeur"
" et le robot retourne en position de repos : ::"

