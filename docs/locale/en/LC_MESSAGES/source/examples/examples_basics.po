# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the PyNiryo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: PyNiryo 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-07 15:40+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/examples/examples_basics.rst:2
msgid "Examples: Basics"
msgstr ""

#: ../../source/examples/examples_basics.rst:4
msgid ""
"In this file, two short programs are implemented & commented in order to "
"help you understand the philosophy behind the PyNiryo package."
msgstr ""

#: ../../source/examples/examples_basics.rst:8
msgid ""
"If you are using the real robot, make sure the environment around it is "
"clear."
msgstr ""

#: ../../source/examples/examples_basics.rst:12
msgid "Your first move joint"
msgstr ""

#: ../../source/examples/examples_basics.rst:14
msgid "The following example shows a first use case. It's a simple MoveJ. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:28
msgid "Code Details - First Move J"
msgstr ""

#: ../../source/examples/examples_basics.rst:29
msgid "First of all, we import the library to be able to access functions. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:33
msgid ""
"Then, we instantiate the connection and link the variable ``robot`` to "
"the robot at the IP Address ``10.10.10.10``.  ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:38
msgid ""
"Once the connection is done, we calibrate the robot using its "
":meth:`~.api.tcp_client.NiryoRobot.calibrate_auto` function. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:43
msgid ""
"As the robot is now calibrated, we can do a Move Joints by giving the 6 "
"axis positions in radians! To do so, we use "
":meth:`~.api.tcp_client.NiryoRobot.move_joints`. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:48
msgid ""
"Our process is now over, we can close the connection with "
":meth:`~.api.tcp_client.NiryoRobot.quit`. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:55
msgid "Your first pick and place"
msgstr ""

#: ../../source/examples/examples_basics.rst:56
msgid ""
"In the second example, we are going to develop a pick and place "
"algorithm. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:75
msgid "Code Details - First Pick And Place"
msgstr ""

#: ../../source/examples/examples_basics.rst:77
msgid ""
"First of all, we import the library and start the connection between our "
"computer and the robot. We also calibrate the robot. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:85
msgid ""
"Then, we equip the tool with "
":meth:`~.api.tcp_client.NiryoRobot.update_tool`. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:90
msgid ""
"Now that our initialization is done, we can open the gripper (or push air"
" from the vacuum) with "
":meth:`~.api.tcp_client.NiryoRobot.release_with_tool`, go to the picking "
"pose via :meth:`~.api.tcp_client.NiryoRobot.move_pose` & then catch an "
"object with :meth:`~.api.tcp_client.NiryoRobot.grasp_with_tool`! ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:100
msgid "We now get to the place pose, and place the object. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:105
msgid "Our process is now over, we can close the connection. ::"
msgstr ""

#: ../../source/examples/examples_basics.rst:111
msgid "Notes"
msgstr ""

#: ../../source/examples/examples_basics.rst:114
msgid ""
"You may not have fully understood how to move the robot and use PyNiryo "
"and that is totally fine because you will find more details on the next "
"examples page!"
msgstr ""

#: ../../source/examples/examples_basics.rst:117
msgid ""
"The important thing to remember from this page is how to import the "
"library, connect to the robot & call functions."
msgstr ""

#~ msgid ""
#~ "In this file, two short programs "
#~ "are implemented & commented in order "
#~ "to help you understand the philosophy"
#~ " behind the PyNiryo package"
#~ msgstr ""

#~ msgid ""
#~ "If you are using the real robot,"
#~ " make sure the environment around it"
#~ " is clear"
#~ msgstr ""

#~ msgid "First of all, we import the library to be able to access functions ::"
#~ msgstr ""

#~ msgid ""
#~ "Then, we instantiate the connection and"
#~ " link the variable ``robot`` to the"
#~ " robot at the IP Address "
#~ "``10.10.10.10``  ::"
#~ msgstr ""

#~ msgid ""
#~ "Once the connection is done, we "
#~ "calibrate the robot using its "
#~ ":meth:`~.api.tcp_client.NiryoRobot.calibrate_auto` function "
#~ "::"
#~ msgstr ""

#~ msgid ""
#~ "As the robot is now calibrated, we"
#~ " can do a Move Joints by giving"
#~ " the 6 axis positions in radians! "
#~ "To do so, we use "
#~ ":meth:`~.api.tcp_client.NiryoRobot.move_joints` ::"
#~ msgstr ""

#~ msgid ""
#~ "Our process is now over, we can"
#~ " close the connection with "
#~ ":meth:`~.api.tcp_client.NiryoRobot.quit` ::"
#~ msgstr ""

#~ msgid ""
#~ "In the second example, we are "
#~ "going to develop a pick and place"
#~ " algorithm ::"
#~ msgstr ""

#~ msgid ""
#~ "First of all, we import the "
#~ "library and start the connection between"
#~ " our computer and the robot. We "
#~ "also calibrate the robot ::"
#~ msgstr ""

#~ msgid ""
#~ "Then, we equip the tool with "
#~ ":meth:`~.api.tcp_client.NiryoRobot.update_tool` ::"
#~ msgstr ""

#~ msgid ""
#~ "Now that our initialization is done, "
#~ "we can open the gripper (or push"
#~ " air from the vacuum) with "
#~ ":meth:`~.api.tcp_client.NiryoRobot.release_with_tool`, go "
#~ "to the picking pose via "
#~ ":meth:`~.api.tcp_client.NiryoRobot.move_pose` & then "
#~ "catch an object with "
#~ ":meth:`~.api.tcp_client.NiryoRobot.grasp_with_tool` ! ::"
#~ msgstr ""

#~ msgid "We now get to the place pose, and place the object ::"
#~ msgstr ""

#~ msgid "Our process is now over, we can close the connection ::"
#~ msgstr ""

#~ msgid ""
#~ "You may not have fully understood "
#~ "how to move the robot and use "
#~ "PyNiryo and that is totally fine "
#~ "because you will find more details "
#~ "on the next examples page !"
#~ msgstr ""

#~ msgid ""
#~ "The important thing to remember from "
#~ "this page is how to import the "
#~ "library, connect to the robot & "
#~ "call functions"
#~ msgstr ""

