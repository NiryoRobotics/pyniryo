# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the PyNiryo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: PyNiryo 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-13 14:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/api_doc/api.rst:2
msgid "PyNiryo API Documentation"
msgstr ""

#: ../../source/api_doc/api.rst:4
msgid ""
"This file presents the different :ref:`source/api_doc/api:Command "
"Functions`, :ref:`source/api_doc/api:Enums` & "
":ref:`source/api_doc/api:Python Object classes` available with the API."
msgstr ""

#: ../../source/api_doc/api.rst:7
msgid ""
":ref:`source/api_doc/api:Command Functions` are used to deal directly "
"with the robot. It could be "
":meth:`~.api.tcp_client.NiryoRobot.move_joints`, "
":meth:`~.api.tcp_client.NiryoRobot.get_hardware_status` "
":meth:`~.api.tcp_client.NiryoRobot.vision_pick`, or also "
":meth:`~.api.tcp_client.NiryoRobot.run_conveyor`"
msgstr ""

#: ../../source/api_doc/api.rst:12
msgid ""
":ref:`source/api_doc/api:Enums` are used to pass specific arguments to "
"functions. For instance :class:`~.api.enums_communication.PinState`, "
":class:`~.api.enums_communication.ConveyorDirection`, ..."
msgstr ""

#: ../../source/api_doc/api.rst:15
msgid ""
":ref:`source/api_doc/api:Python Object classes`, as |pose_object|, ease "
"some operations"
msgstr ""

#: ../../source/api_doc/api.rst:18
msgid "Command functions"
msgstr ""

#: ../../source/api_doc/api.rst:20
msgid ""
"This section references all existing functions to control your robot, "
"which includes:"
msgstr ""

#: ../../source/api_doc/api.rst:22
msgid "Moving the robot"
msgstr ""

#: ../../source/api_doc/api.rst:23
msgid "Using Vision"
msgstr ""

#: ../../source/api_doc/api.rst:24
msgid "Controlling Conveyor Belts"
msgstr ""

#: ../../source/api_doc/api.rst:25
msgid "Playing with Hardware"
msgstr ""

#: ../../source/api_doc/api.rst:27
msgid ""
"All functions to control the robot are accessible via an instance of the "
"class :class:`~.api.enums_communication.NiryoRobot` ::"
msgstr ""

#: ../../source/api_doc/api.rst:32
msgid "See examples on :ref:`source/examples/examples_basics:Examples: Basics`"
msgstr ""

#: ../../source/api_doc/api.rst:34
msgid "List of functions subsections:"
msgstr ""

#: ../../source/api_doc/api.rst:43
msgid "TCP Connection"
msgstr ""

#: api.tcp_client.NiryoRobot.connect:1 of
msgid "Connect to the TCP Server"
msgstr ""

#: api.tcp_client.NiryoRobot.activate_electromagnet
#: api.tcp_client.NiryoRobot.analog_read api.tcp_client.NiryoRobot.analog_write
#: api.tcp_client.NiryoRobot.calibrate api.tcp_client.NiryoRobot.close_gripper
#: api.tcp_client.NiryoRobot.connect api.tcp_client.NiryoRobot.control_conveyor
#: api.tcp_client.NiryoRobot.deactivate_electromagnet
#: api.tcp_client.NiryoRobot.delete_dynamic_frame
#: api.tcp_client.NiryoRobot.delete_workspace
#: api.tcp_client.NiryoRobot.detect_object
#: api.tcp_client.NiryoRobot.digital_read
#: api.tcp_client.NiryoRobot.digital_write
#: api.tcp_client.NiryoRobot.edit_dynamic_frame
#: api.tcp_client.NiryoRobot.enable_tcp
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints
#: api.tcp_client.NiryoRobot.forward_kinematics
#: api.tcp_client.NiryoRobot.get_pose_saved
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame
#: api.tcp_client.NiryoRobot.get_sound_duration
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel
#: api.tcp_client.NiryoRobot.get_workspace_ratio
#: api.tcp_client.NiryoRobot.inverse_kinematics
#: api.tcp_client.NiryoRobot.jog_joints api.tcp_client.NiryoRobot.jog_pose
#: api.tcp_client.NiryoRobot.led_ring_alternate
#: api.tcp_client.NiryoRobot.led_ring_breath
#: api.tcp_client.NiryoRobot.led_ring_chase
#: api.tcp_client.NiryoRobot.led_ring_custom
#: api.tcp_client.NiryoRobot.led_ring_flashing
#: api.tcp_client.NiryoRobot.led_ring_go_up
#: api.tcp_client.NiryoRobot.led_ring_go_up_down
#: api.tcp_client.NiryoRobot.led_ring_rainbow
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle
#: api.tcp_client.NiryoRobot.led_ring_snake
#: api.tcp_client.NiryoRobot.led_ring_solid
#: api.tcp_client.NiryoRobot.led_ring_wipe
#: api.tcp_client.NiryoRobot.move_joints
#: api.tcp_client.NiryoRobot.move_linear_pose
#: api.tcp_client.NiryoRobot.move_linear_relative
#: api.tcp_client.NiryoRobot.move_pose api.tcp_client.NiryoRobot.move_relative
#: api.tcp_client.NiryoRobot.move_to_object
#: api.tcp_client.NiryoRobot.open_gripper
#: api.tcp_client.NiryoRobot.pick_and_place
#: api.tcp_client.NiryoRobot.pick_from_pose
#: api.tcp_client.NiryoRobot.place_from_pose
#: api.tcp_client.NiryoRobot.play_sound api.tcp_client.NiryoRobot.run_conveyor
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses
#: api.tcp_client.NiryoRobot.save_pose
#: api.tcp_client.NiryoRobot.save_trajectory
#: api.tcp_client.NiryoRobot.save_workspace_from_points
#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses
#: api.tcp_client.NiryoRobot.say api.tcp_client.NiryoRobot.set_arm_max_velocity
#: api.tcp_client.NiryoRobot.set_brightness
#: api.tcp_client.NiryoRobot.set_contrast
#: api.tcp_client.NiryoRobot.set_jog_control
#: api.tcp_client.NiryoRobot.set_learning_mode
#: api.tcp_client.NiryoRobot.set_led_color
#: api.tcp_client.NiryoRobot.set_pin_mode
#: api.tcp_client.NiryoRobot.set_saturation api.tcp_client.NiryoRobot.set_tcp
#: api.tcp_client.NiryoRobot.set_volume
#: api.tcp_client.NiryoRobot.setup_electromagnet
#: api.tcp_client.NiryoRobot.shift_linear_pose
#: api.tcp_client.NiryoRobot.shift_pose api.tcp_client.NiryoRobot.stop_conveyor
#: api.tcp_client.NiryoRobot.unset_conveyor
#: api.tcp_client.NiryoRobot.vision_pick api.tcp_client.NiryoRobot.wait of
msgid "Parameters"
msgstr ""

#: api.tcp_client.NiryoRobot.connect:3 of
msgid "IP Address"
msgstr ""

#: api.objects.PoseObject.copy_with_offsets api.objects.PoseObject.to_list
#: api.tcp_client.NiryoRobot.activate_electromagnet
#: api.tcp_client.NiryoRobot.analog_read api.tcp_client.NiryoRobot.analog_write
#: api.tcp_client.NiryoRobot.calibrate api.tcp_client.NiryoRobot.calibrate_auto
#: api.tcp_client.NiryoRobot.clean_trajectory_memory
#: api.tcp_client.NiryoRobot.close_connection
#: api.tcp_client.NiryoRobot.close_gripper api.tcp_client.NiryoRobot.connect
#: api.tcp_client.NiryoRobot.control_conveyor
#: api.tcp_client.NiryoRobot.deactivate_electromagnet
#: api.tcp_client.NiryoRobot.delete_dynamic_frame
#: api.tcp_client.NiryoRobot.delete_pose
#: api.tcp_client.NiryoRobot.delete_trajectory
#: api.tcp_client.NiryoRobot.delete_workspace
#: api.tcp_client.NiryoRobot.detect_object
#: api.tcp_client.NiryoRobot.digital_read
#: api.tcp_client.NiryoRobot.digital_write
#: api.tcp_client.NiryoRobot.edit_dynamic_frame
#: api.tcp_client.NiryoRobot.enable_tcp
#: api.tcp_client.NiryoRobot.execute_registered_trajectory
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints
#: api.tcp_client.NiryoRobot.forward_kinematics
#: api.tcp_client.NiryoRobot.get_analog_io_state
#: api.tcp_client.NiryoRobot.get_camera_intrinsics
#: api.tcp_client.NiryoRobot.get_connected_conveyors_id
#: api.tcp_client.NiryoRobot.get_current_tool_id
#: api.tcp_client.NiryoRobot.get_custom_button_state
#: api.tcp_client.NiryoRobot.get_digital_io_state
#: api.tcp_client.NiryoRobot.get_hardware_status
#: api.tcp_client.NiryoRobot.get_image_parameters
#: api.tcp_client.NiryoRobot.get_img_compressed
#: api.tcp_client.NiryoRobot.get_joints
#: api.tcp_client.NiryoRobot.get_learning_mode
#: api.tcp_client.NiryoRobot.get_pose api.tcp_client.NiryoRobot.get_pose_quat
#: api.tcp_client.NiryoRobot.get_pose_saved
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list
#: api.tcp_client.NiryoRobot.get_saved_pose_list
#: api.tcp_client.NiryoRobot.get_saved_trajectory_list
#: api.tcp_client.NiryoRobot.get_sound_duration
#: api.tcp_client.NiryoRobot.get_sounds
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel
#: api.tcp_client.NiryoRobot.get_trajectory_saved
#: api.tcp_client.NiryoRobot.get_workspace_list
#: api.tcp_client.NiryoRobot.get_workspace_ratio
#: api.tcp_client.NiryoRobot.go_to_sleep
#: api.tcp_client.NiryoRobot.grasp_with_tool
#: api.tcp_client.NiryoRobot.inverse_kinematics
#: api.tcp_client.NiryoRobot.jog_joints api.tcp_client.NiryoRobot.jog_pose
#: api.tcp_client.NiryoRobot.led_ring_alternate
#: api.tcp_client.NiryoRobot.led_ring_breath
#: api.tcp_client.NiryoRobot.led_ring_chase
#: api.tcp_client.NiryoRobot.led_ring_custom
#: api.tcp_client.NiryoRobot.led_ring_flashing
#: api.tcp_client.NiryoRobot.led_ring_go_up
#: api.tcp_client.NiryoRobot.led_ring_go_up_down
#: api.tcp_client.NiryoRobot.led_ring_rainbow
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle
#: api.tcp_client.NiryoRobot.led_ring_snake
#: api.tcp_client.NiryoRobot.led_ring_solid
#: api.tcp_client.NiryoRobot.led_ring_turn_off
#: api.tcp_client.NiryoRobot.led_ring_wipe
#: api.tcp_client.NiryoRobot.move_joints
#: api.tcp_client.NiryoRobot.move_linear_pose
#: api.tcp_client.NiryoRobot.move_linear_relative
#: api.tcp_client.NiryoRobot.move_pose api.tcp_client.NiryoRobot.move_relative
#: api.tcp_client.NiryoRobot.move_to_home_pose
#: api.tcp_client.NiryoRobot.move_to_object
#: api.tcp_client.NiryoRobot.need_calibration
#: api.tcp_client.NiryoRobot.open_gripper
#: api.tcp_client.NiryoRobot.pick_and_place
#: api.tcp_client.NiryoRobot.pick_from_pose
#: api.tcp_client.NiryoRobot.place_from_pose
#: api.tcp_client.NiryoRobot.play_sound
#: api.tcp_client.NiryoRobot.pull_air_vacuum_pump
#: api.tcp_client.NiryoRobot.push_air_vacuum_pump
#: api.tcp_client.NiryoRobot.release_with_tool
#: api.tcp_client.NiryoRobot.reset_tcp api.tcp_client.NiryoRobot.run_conveyor
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses
#: api.tcp_client.NiryoRobot.save_last_learned_trajectory
#: api.tcp_client.NiryoRobot.save_pose
#: api.tcp_client.NiryoRobot.save_trajectory
#: api.tcp_client.NiryoRobot.save_workspace_from_points
#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses
#: api.tcp_client.NiryoRobot.say api.tcp_client.NiryoRobot.set_arm_max_velocity
#: api.tcp_client.NiryoRobot.set_brightness
#: api.tcp_client.NiryoRobot.set_contrast
#: api.tcp_client.NiryoRobot.set_conveyor
#: api.tcp_client.NiryoRobot.set_jog_control
#: api.tcp_client.NiryoRobot.set_learning_mode
#: api.tcp_client.NiryoRobot.set_led_color
#: api.tcp_client.NiryoRobot.set_pin_mode
#: api.tcp_client.NiryoRobot.set_saturation api.tcp_client.NiryoRobot.set_tcp
#: api.tcp_client.NiryoRobot.set_volume
#: api.tcp_client.NiryoRobot.setup_electromagnet
#: api.tcp_client.NiryoRobot.shift_linear_pose
#: api.tcp_client.NiryoRobot.shift_pose api.tcp_client.NiryoRobot.stop_conveyor
#: api.tcp_client.NiryoRobot.stop_sound api.tcp_client.NiryoRobot.tool_reboot
#: api.tcp_client.NiryoRobot.update_tool api.tcp_client.NiryoRobot.vision_pick
#: api.tcp_client.NiryoRobot.wait of
msgid "Return type"
msgstr ""

#: api.tcp_client.NiryoRobot.close_connection:1 of
msgid "Close connection with robot"
msgstr ""

#: ../../source/api_doc/api.rst:49
msgid "Main purpose functions"
msgstr ""

#: api.tcp_client.NiryoRobot.calibrate:1 of
msgid ""
"Calibrate (manually or automatically) motors. Automatic calibration will "
"do nothing if motors are already calibrated"
msgstr ""

#: api.tcp_client.NiryoRobot.calibrate:4 of
msgid "Auto or Manual"
msgstr ""

#: api.tcp_client.NiryoRobot.calibrate_auto:1 of
msgid "Start a automatic motors calibration if motors are not calibrated yet"
msgstr ""

#: api.tcp_client.NiryoRobot.need_calibration:1 of
msgid "Return a bool indicating whereas the robot motors need to be calibrate"
msgstr ""

#: api.tcp_client.NiryoRobot.get_learning_mode:1 of
msgid "Get learning mode state"
msgstr ""

#: api.tcp_client.NiryoRobot.delete_dynamic_frame
#: api.tcp_client.NiryoRobot.detect_object
#: api.tcp_client.NiryoRobot.edit_dynamic_frame
#: api.tcp_client.NiryoRobot.get_analog_io_state
#: api.tcp_client.NiryoRobot.get_camera_intrinsics
#: api.tcp_client.NiryoRobot.get_connected_conveyors_id
#: api.tcp_client.NiryoRobot.get_custom_button_state
#: api.tcp_client.NiryoRobot.get_digital_io_state
#: api.tcp_client.NiryoRobot.get_hardware_status
#: api.tcp_client.NiryoRobot.get_image_parameters
#: api.tcp_client.NiryoRobot.get_img_compressed
#: api.tcp_client.NiryoRobot.get_joints
#: api.tcp_client.NiryoRobot.get_learning_mode
#: api.tcp_client.NiryoRobot.get_pose_quat
#: api.tcp_client.NiryoRobot.get_pose_saved
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list
#: api.tcp_client.NiryoRobot.get_sound_duration
#: api.tcp_client.NiryoRobot.get_sounds
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel
#: api.tcp_client.NiryoRobot.get_trajectory_saved
#: api.tcp_client.NiryoRobot.inverse_kinematics
#: api.tcp_client.NiryoRobot.led_ring_alternate
#: api.tcp_client.NiryoRobot.led_ring_breath
#: api.tcp_client.NiryoRobot.led_ring_chase
#: api.tcp_client.NiryoRobot.led_ring_custom
#: api.tcp_client.NiryoRobot.led_ring_flashing
#: api.tcp_client.NiryoRobot.led_ring_go_up
#: api.tcp_client.NiryoRobot.led_ring_go_up_down
#: api.tcp_client.NiryoRobot.led_ring_rainbow
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle
#: api.tcp_client.NiryoRobot.led_ring_snake
#: api.tcp_client.NiryoRobot.led_ring_solid
#: api.tcp_client.NiryoRobot.led_ring_turn_off
#: api.tcp_client.NiryoRobot.led_ring_wipe
#: api.tcp_client.NiryoRobot.move_linear_relative
#: api.tcp_client.NiryoRobot.move_relative
#: api.tcp_client.NiryoRobot.move_to_object
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses
#: api.tcp_client.NiryoRobot.set_conveyor
#: api.tcp_client.NiryoRobot.set_led_color
#: api.tcp_client.NiryoRobot.vision_pick of
msgid "Returns"
msgstr ""

#: api.tcp_client.NiryoRobot.get_learning_mode:3 of
msgid "``True`` if learning mode is on"
msgstr ""

#: api.tcp_client.NiryoRobot.set_learning_mode:1 of
msgid "Set learning mode if param is ``True``, else turn it off"
msgstr ""

#: api.tcp_client.NiryoRobot.set_jog_control:3
#: api.tcp_client.NiryoRobot.set_learning_mode:3 of
msgid "``True`` or ``False``"
msgstr ""

#: api.tcp_client.NiryoRobot.set_arm_max_velocity:1 of
msgid "Limit arm max velocity to a percentage of its maximum velocity"
msgstr ""

#: api.tcp_client.NiryoRobot.set_arm_max_velocity:3 of
msgid "Should be between 1 & 100"
msgstr ""

#: api.tcp_client.NiryoRobot.set_jog_control:1 of
msgid "Set jog control mode if param is True, else turn it off"
msgstr ""

#: api.tcp_client.NiryoRobot.wait:1 of
msgid "Wait for a certain time"
msgstr ""

#: api.tcp_client.NiryoRobot.wait:3 of
msgid "duration in seconds"
msgstr ""

#: ../../source/api_doc/api.rst:61
msgid "Joints & Pose"
msgstr ""

#: api.tcp_client.NiryoRobot.get_joints:1 of
msgid "Get joints value in radians You can also use a getter ::"
msgstr ""

#: api.tcp_client.NiryoRobot.get_joints:7
#: api.tcp_client.NiryoRobot.inverse_kinematics:6 of
msgid "List of joints value"
msgstr ""

#: api.tcp_client.NiryoRobot.get_pose:1 of
msgid ""
"Get end effector link pose as [x, y, z, roll, pitch, yaw]. x, y & z are "
"expressed in meters / roll, pitch & yaw are expressed in radians You can "
"also use a getter ::"
msgstr ""

#: api.tcp_client.NiryoRobot.get_pose_quat:1 of
msgid "Get end effector link pose in Quaternion coordinates"
msgstr ""

#: api.tcp_client.NiryoRobot.get_pose_quat:3 of
msgid ""
"Position and quaternion coordinates concatenated in a list : [x, y, z, "
"qx, qy, qz, qw]"
msgstr ""

#: api.tcp_client.NiryoRobot.move_joints:1 of
msgid "Move robot joints. Joints are expressed in radians."
msgstr ""

#: api.tcp_client.NiryoRobot.move_joints:3
#: api.tcp_client.NiryoRobot.move_pose:5 of
msgid "All lines of the next example realize the same operation: ::"
msgstr ""

#: api.tcp_client.NiryoRobot.forward_kinematics:4
#: api.tcp_client.NiryoRobot.move_joints:9 of
msgid "either 6 args (1 for each joints) or a list of 6 joints"
msgstr ""

#: api.tcp_client.NiryoRobot.move_pose:1 of
msgid ""
"Move robot end effector pose to a (x, y, z, roll, pitch, yaw, frame_name)"
" pose in a particular frame (frame_name) if defined. x, y & z are "
"expressed in meters / roll, pitch & yaw are expressed in radians"
msgstr ""

#: api.tcp_client.NiryoRobot.move_linear_pose:4
#: api.tcp_client.NiryoRobot.move_pose:15 of
msgid ""
"either 7 args (1 for each coordinates and 1 for the name of the frame) or"
" a list of 6 coordinates or a ``PoseObject`` and 1 for the frame name"
msgstr ""

#: api.tcp_client.NiryoRobot.move_linear_pose:1 of
msgid ""
"Move robot end effector pose to a (x, y, z, roll, pitch, yaw) pose with a"
" linear trajectory, in a particular frame (frame_name) if defined"
msgstr ""

#: api.tcp_client.NiryoRobot.shift_pose:1 of
msgid "Shift robot end effector pose along one axis"
msgstr ""

#: api.tcp_client.NiryoRobot.shift_linear_pose:3
#: api.tcp_client.NiryoRobot.shift_pose:3 of
msgid "Axis along which the robot is shifted"
msgstr ""

#: api.tcp_client.NiryoRobot.shift_linear_pose:5
#: api.tcp_client.NiryoRobot.shift_pose:5 of
msgid "In meter for X/Y/Z and radians for roll/pitch/yaw"
msgstr ""

#: api.tcp_client.NiryoRobot.shift_linear_pose:1 of
msgid "Shift robot end effector pose along one axis, with a linear trajectory"
msgstr ""

#: api.tcp_client.NiryoRobot.jog_joints:1 of
msgid ""
"Jog robot joints'. Jog corresponds to a shift without motion planning. "
"Values are expressed in radians."
msgstr ""

#: api.tcp_client.NiryoRobot.jog_joints:5 of
msgid "either 6 args (1 for each joints) or a list of 6 joints offset"
msgstr ""

#: api.tcp_client.NiryoRobot.jog_pose:1 of
msgid ""
"Jog robot end effector pose Jog corresponds to a shift without motion "
"planning Arguments are [dx, dy, dz, d_roll, d_pitch, d_yaw] dx, dy & dz "
"are expressed in meters / d_roll, d_pitch & d_yaw are expressed in "
"radians"
msgstr ""

#: api.tcp_client.NiryoRobot.jog_pose:6 of
msgid "either 6 args (1 for each coordinates) or a list of 6 offset"
msgstr ""

#: api.tcp_client.NiryoRobot.move_to_home_pose:1 of
msgid "Move to a position where the forearm lays on shoulder"
msgstr ""

#: api.tcp_client.NiryoRobot.go_to_sleep:1 of
msgid "Go to home pose and activate learning mode"
msgstr ""

#: api.tcp_client.NiryoRobot.forward_kinematics:1 of
msgid ""
"Compute forward kinematics of a given joints configuration and give the "
"associated spatial pose"
msgstr ""

#: api.tcp_client.NiryoRobot.inverse_kinematics:1 of
msgid "Compute inverse kinematics"
msgstr ""

#: api.tcp_client.NiryoRobot.inverse_kinematics:3 of
msgid ""
"either 6 args (1 for each coordinates) or a list of 6 coordinates or a "
"``PoseObject``"
msgstr ""

#: ../../source/api_doc/api.rst:79
msgid "Saved Poses"
msgstr ""

#: api.tcp_client.NiryoRobot.get_pose_saved:1 of
msgid "Get pose saved in from Ned's memory"
msgstr ""

#: api.tcp_client.NiryoRobot.get_pose_saved:3 of
msgid "Pose name in robot's memory"
msgstr ""

#: api.tcp_client.NiryoRobot.get_pose_saved:5 of
msgid "Pose associated to pose_name"
msgstr ""

#: api.tcp_client.NiryoRobot.save_pose:1 of
msgid "Save pose in robot's memory"
msgstr ""

#: api.tcp_client.NiryoRobot.pick_from_pose:10
#: api.tcp_client.NiryoRobot.place_from_pose:10
#: api.tcp_client.NiryoRobot.save_pose:4 api.tcp_client.NiryoRobot.set_tcp:4 of
msgid ""
"either 6 args (1 for each coordinates) or a list of 6 coordinates or a "
"PoseObject"
msgstr ""

#: api.tcp_client.NiryoRobot.delete_pose:1 of
msgid "Delete pose from robot's memory"
msgstr ""

#: api.tcp_client.NiryoRobot.get_saved_pose_list:1 of
msgid "Get list of poses' name saved in robot memory"
msgstr ""

#: ../../source/api_doc/api.rst:87
msgid "Pick & Place"
msgstr ""

#: api.tcp_client.NiryoRobot.pick_from_pose:1 of
msgid "Execute a picking from a pose."
msgstr ""

#: api.tcp_client.NiryoRobot.pick_from_pose:3 of
msgid "A picking is described as :"
msgstr ""

#: api.tcp_client.NiryoRobot.pick_from_pose:5 of
msgid "* going over the object"
msgstr ""

#: api.tcp_client.NiryoRobot.pick_from_pose:6
#: api.tcp_client.NiryoRobot.place_from_pose:6 of
msgid "* going down until height = z"
msgstr ""

#: api.tcp_client.NiryoRobot.pick_from_pose:7 of
msgid "* grasping with tool"
msgstr ""

#: api.tcp_client.NiryoRobot.pick_from_pose:8 of
msgid "* going back over the object"
msgstr ""

#: api.tcp_client.NiryoRobot.place_from_pose:1 of
msgid "Execute a placing from a position."
msgstr ""

#: api.tcp_client.NiryoRobot.place_from_pose:3 of
msgid "A placing is described as :"
msgstr ""

#: api.tcp_client.NiryoRobot.place_from_pose:5 of
msgid "* going over the place"
msgstr ""

#: api.tcp_client.NiryoRobot.place_from_pose:7 of
msgid "* releasing the object with tool"
msgstr ""

#: api.tcp_client.NiryoRobot.place_from_pose:8 of
msgid "* going back over the place"
msgstr ""

#: api.tcp_client.NiryoRobot.pick_and_place:1 of
msgid "Execute a pick then a place"
msgstr ""

#: api.tcp_client.NiryoRobot.pick_and_place:3 of
msgid "Pick Pose : [x, y, z, roll, pitch, yaw] or PoseObject"
msgstr ""

#: api.tcp_client.NiryoRobot.pick_and_place:5 of
msgid "Place Pose : [x, y, z, roll, pitch, yaw] or PoseObject"
msgstr ""

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses:5
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:17
#: api.tcp_client.NiryoRobot.pick_and_place:7 of
msgid "Distance from waypoints before smoothing trajectory"
msgstr ""

#: ../../source/api_doc/api.rst:94
msgid "Trajectories"
msgstr ""

#: api.tcp_client.NiryoRobot.get_trajectory_saved:1 of
msgid "Get trajectory saved in Ned's memory"
msgstr ""

#: api.tcp_client.NiryoRobot.get_trajectory_saved:4 of
msgid "Trajectory"
msgstr ""

#: api.tcp_client.NiryoRobot.get_saved_trajectory_list:1 of
msgid "Get list of trajectories' name saved in robot memory"
msgstr ""

#: api.tcp_client.NiryoRobot.execute_registered_trajectory:1 of
msgid "Execute trajectory from Ned's memory"
msgstr ""

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses:1 of
msgid "Execute trajectory from list of poses"
msgstr ""

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses:3 of
msgid "List of [x,y,z,qx,qy,qz,qw] or list of [x,y,z,roll,pitch,yaw]"
msgstr ""

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:1 of
msgid "Execute trajectory from list of poses and joints"
msgstr ""

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:3
#: api.tcp_client.NiryoRobot.edit_dynamic_frame:3
#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:3
#: api.tcp_client.NiryoRobot.get_analog_io_state:3
#: api.tcp_client.NiryoRobot.get_digital_io_state:3
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame:3
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list:3
#: api.tcp_client.NiryoRobot.led_ring_custom:4
#: api.tcp_client.NiryoRobot.led_ring_solid:3
#: api.tcp_client.NiryoRobot.led_ring_turn_off:3
#: api.tcp_client.NiryoRobot.move_linear_relative:3
#: api.tcp_client.NiryoRobot.move_relative:3
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:3
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:3
#: api.tcp_client.NiryoRobot.set_led_color:3
#: api.tcp_client.NiryoRobot.tool_reboot:3 of
msgid "Example: ::"
msgstr ""

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:11 of
msgid ""
"List of [x,y,z,qx,qy,qz,qw] or list of [x,y,z,roll,pitch,yaw] or a list "
"of [j1,j2,j3,j4,j5,j6]"
msgstr ""

#: api.tcp_client.NiryoRobot.execute_trajectory_from_poses_and_joints:14 of
msgid ""
"List of string 'pose' or 'joint', or ['pose'] (if poses only) or "
"['joint'] (if joints only). If None, it is assumed there are only poses "
"in the list."
msgstr ""

#: api.tcp_client.NiryoRobot.save_trajectory:1 of
msgid "Save trajectory in robot memory"
msgstr ""

#: api.tcp_client.NiryoRobot.save_trajectory:3 of
msgid ""
"list of Joints [j1, j2, j3, j4, j5, j6] as waypoints to create the "
"trajectory"
msgstr ""

#: api.tcp_client.NiryoRobot.save_trajectory:5 of
msgid "Name you want to give to the trajectory"
msgstr ""

#: api.tcp_client.NiryoRobot.save_trajectory:7 of
msgid "Description you want to give to the trajectory"
msgstr ""

#: api.tcp_client.NiryoRobot.save_last_learned_trajectory:1 of
msgid "Save last user executed trajectory"
msgstr ""

#: api.tcp_client.NiryoRobot.clean_trajectory_memory:1
#: api.tcp_client.NiryoRobot.delete_trajectory:1 of
msgid "Delete trajectory from robot's memory"
msgstr ""

#: ../../source/api_doc/api.rst:107
msgid "Dynamic frames"
msgstr ""

#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list:1 of
msgid "Get list of saved dynamic frames"
msgstr ""

#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list:9 of
msgid "list of dynamic frames name, list of description of dynamic frames"
msgstr ""

#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame:1 of
msgid "Get name, description and pose of a dynamic frame"
msgstr ""

#: api.tcp_client.NiryoRobot.edit_dynamic_frame:7
#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame:7
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:11
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:11 of
msgid "name of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.get_saved_dynamic_frame:9 of
msgid "name, description, position and orientation of a frame"
msgstr ""

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:1 of
msgid "Create a dynamic frame with 3 poses (origin, x, y)"
msgstr ""

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:13
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:13 of
msgid "description of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:15 of
msgid "pose of the origin of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:17 of
msgid "pose of the point x of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:19 of
msgid "pose of the point y of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:9
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:21
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:21 of
msgid "indicate if the frame belong to a workspace"
msgstr ""

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:11
#: api.tcp_client.NiryoRobot.edit_dynamic_frame:13
#: api.tcp_client.NiryoRobot.led_ring_alternate:24
#: api.tcp_client.NiryoRobot.led_ring_breath:19
#: api.tcp_client.NiryoRobot.led_ring_chase:20
#: api.tcp_client.NiryoRobot.led_ring_custom:12
#: api.tcp_client.NiryoRobot.led_ring_flashing:22
#: api.tcp_client.NiryoRobot.led_ring_go_up:20
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:20
#: api.tcp_client.NiryoRobot.led_ring_rainbow:16
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:16
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:16
#: api.tcp_client.NiryoRobot.led_ring_snake:18
#: api.tcp_client.NiryoRobot.led_ring_solid:9
#: api.tcp_client.NiryoRobot.led_ring_turn_off:7
#: api.tcp_client.NiryoRobot.led_ring_wipe:15
#: api.tcp_client.NiryoRobot.move_linear_relative:11
#: api.tcp_client.NiryoRobot.move_relative:11
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:23
#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses:23
#: api.tcp_client.NiryoRobot.set_led_color:11 of
msgid "status, message"
msgstr ""

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:1 of
msgid "Create a dynamic frame with 3 points (origin, x, y)"
msgstr ""

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:15 of
msgid "origin point of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:17 of
msgid "point x of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.save_dynamic_frame_from_points:19 of
msgid "point y of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.edit_dynamic_frame:1 of
msgid "Modify a dynamic frame"
msgstr ""

#: api.tcp_client.NiryoRobot.edit_dynamic_frame:9 of
msgid "new name of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.edit_dynamic_frame:11 of
msgid "new description of the frame"
msgstr ""

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:1 of
msgid "Delete a dynamic frame"
msgstr ""

#: api.tcp_client.NiryoRobot.delete_dynamic_frame:7 of
msgid "name of the frame to remove"
msgstr ""

#: api.tcp_client.NiryoRobot.move_relative:1 of
msgid "Move robot end of a offset in a frame"
msgstr ""

#: api.tcp_client.NiryoRobot.move_linear_relative:7
#: api.tcp_client.NiryoRobot.move_relative:7 of
msgid "list which contains offset of x, y, z, roll, pitch, yaw"
msgstr ""

#: api.tcp_client.NiryoRobot.move_linear_relative:9
#: api.tcp_client.NiryoRobot.move_relative:9 of
msgid "name of local frame"
msgstr ""

#: api.tcp_client.NiryoRobot.move_linear_relative:1 of
msgid "Move robot end of a offset by a linear movement in a frame"
msgstr ""

#: ../../source/api_doc/api.rst:119
msgid "Tools"
msgstr ""

#: api.tcp_client.NiryoRobot.get_current_tool_id:1 of
msgid "Get equipped tool Id"
msgstr ""

#: api.tcp_client.NiryoRobot.update_tool:1 of
msgid "Update equipped tool"
msgstr ""

#: api.tcp_client.NiryoRobot.grasp_with_tool:1 of
msgid ""
"Grasp with tool | This action correspond to | - Close gripper for "
"Grippers | - Pull Air for Vacuum pump | - Activate for Electromagnet"
msgstr ""

#: api.tcp_client.NiryoRobot.release_with_tool:1 of
msgid ""
"Release with tool | This action correspond to | - Open gripper for "
"Grippers | - Push Air for Vacuum pump | - Deactivate for Electromagnet"
msgstr ""

#: api.tcp_client.NiryoRobot.open_gripper:1 of
msgid "Open gripper"
msgstr ""

#: api.tcp_client.NiryoRobot.close_gripper:3
#: api.tcp_client.NiryoRobot.open_gripper:3 of
msgid "Between 100 & 1000 (only for Niryo One and Ned1)"
msgstr ""

#: api.tcp_client.NiryoRobot.open_gripper:5 of
msgid "Closing torque percentage (only for Ned2)"
msgstr ""

#: api.tcp_client.NiryoRobot.open_gripper:7 of
msgid "Hold torque percentage after closing (only for Ned2)"
msgstr ""

#: api.tcp_client.NiryoRobot.close_gripper:1 of
msgid "Close gripper"
msgstr ""

#: api.tcp_client.NiryoRobot.close_gripper:5 of
msgid "Opening torque percentage (only for Ned2)"
msgstr ""

#: api.tcp_client.NiryoRobot.close_gripper:7 of
msgid "Hold torque percentage after opening (only for Ned2)"
msgstr ""

#: api.tcp_client.NiryoRobot.pull_air_vacuum_pump:1 of
msgid "Pull air of vacuum pump"
msgstr ""

#: api.tcp_client.NiryoRobot.push_air_vacuum_pump:1 of
msgid "Push air of vacuum pump"
msgstr ""

#: api.tcp_client.NiryoRobot.setup_electromagnet:1 of
msgid "Setup electromagnet on pin"
msgstr ""

#: api.tcp_client.NiryoRobot.activate_electromagnet:1 of
msgid "Activate electromagnet associated to electromagnet_id on pin_id"
msgstr ""

#: api.tcp_client.NiryoRobot.deactivate_electromagnet:1 of
msgid "Deactivate electromagnet associated to electromagnet_id on pin_id"
msgstr ""

#: api.tcp_client.NiryoRobot.enable_tcp:1 of
msgid ""
"Enables or disables the TCP function (Tool Center Point). If activation "
"is requested, the last recorded TCP value will be applied. The default "
"value depends on the gripper equipped. If deactivation is requested, the "
"TCP will be coincident with the tool_link."
msgstr ""

#: api.tcp_client.NiryoRobot.enable_tcp:6 of
msgid "True to enable, False otherwise."
msgstr ""

#: api.tcp_client.NiryoRobot.set_tcp:1 of
msgid ""
"Activates the TCP function (Tool Center Point) and defines the "
"transformation between the tool_link frame and the TCP frame."
msgstr ""

#: api.tcp_client.NiryoRobot.reset_tcp:1 of
msgid ""
"Reset the TCP (Tool Center Point) transformation. The TCP will be reset "
"according to the tool equipped."
msgstr ""

#: api.tcp_client.NiryoRobot.tool_reboot:1 of
msgid "Reboot the motor of the tool equparam_list = [workspace_name]"
msgstr ""

#: ../../source/api_doc/api.rst:138
msgid "Hardware"
msgstr ""

#: api.tcp_client.NiryoRobot.set_pin_mode:1 of
msgid "Set pin number pin_id to mode pin_mode"
msgstr ""

#: api.tcp_client.NiryoRobot.digital_write:1 of
msgid "Set pin_id state to digital_state"
msgstr ""

#: api.tcp_client.NiryoRobot.digital_read:1 of
msgid "Read pin number pin_id and return its state"
msgstr ""

#: api.tcp_client.NiryoRobot.get_hardware_status:1 of
msgid ""
"Get hardware status : Temperature, Hardware version, motors names & types"
" ..."
msgstr ""

#: api.tcp_client.NiryoRobot.get_hardware_status:3 of
msgid "Infos contains in a HardwareStatusObject"
msgstr ""

#: api.tcp_client.NiryoRobot.get_digital_io_state:1 of
msgid "Get Digital IO state : Names, modes, states."
msgstr ""

#: api.tcp_client.NiryoRobot.get_digital_io_state:8 of
msgid "List of DigitalPinObject instance"
msgstr ""

#: api.tcp_client.NiryoRobot.get_analog_io_state:1 of
msgid "Get Analog IO state : Names, modes, states"
msgstr ""

#: api.tcp_client.NiryoRobot.get_analog_io_state:9 of
msgid "List of AnalogPinObject instance"
msgstr ""

#: api.tcp_client.NiryoRobot.analog_write:1 of
msgid "Set and analog pin_id state to a value"
msgstr ""

#: api.tcp_client.NiryoRobot.analog_write:5 of
msgid "voltage between 0 and 5V"
msgstr ""

#: api.tcp_client.NiryoRobot.analog_read:1 of
msgid "Read the analog pin value"
msgstr ""

#: api.tcp_client.NiryoRobot.get_custom_button_state:1 of
msgid "Get the Ned2's custom button state"
msgstr ""

#: api.tcp_client.NiryoRobot.get_custom_button_state:3 of
msgid "True if pressed, False else"
msgstr ""

#: ../../source/api_doc/api.rst:152
msgid "Conveyor"
msgstr ""

#: api.tcp_client.NiryoRobot.set_conveyor:1 of
msgid "Activate a new conveyor and return its ID"
msgstr ""

#: api.tcp_client.NiryoRobot.set_conveyor:3 of
msgid "New conveyor ID"
msgstr ""

#: api.tcp_client.NiryoRobot.unset_conveyor:1 of
msgid "Remove specific conveyor."
msgstr ""

#: api.tcp_client.NiryoRobot.unset_conveyor:3 of
msgid "Basically, ConveyorID.ONE or ConveyorID.TWO"
msgstr ""

#: api.tcp_client.NiryoRobot.run_conveyor:1 of
msgid "Run conveyor at id 'conveyor_id'"
msgstr ""

#: api.tcp_client.NiryoRobot.stop_conveyor:1 of
msgid "Stop conveyor at id 'conveyor_id'"
msgstr ""

#: api.tcp_client.NiryoRobot.control_conveyor:1 of
msgid "Control conveyor at id 'conveyor_id'"
msgstr ""

#: api.tcp_client.NiryoRobot.control_conveyor:7 of
msgid "New speed which is a percentage of maximum speed"
msgstr ""

#: api.tcp_client.NiryoRobot.control_conveyor:9 of
msgid "Conveyor direction"
msgstr ""

#: api.tcp_client.NiryoRobot.get_connected_conveyors_id:1 of
msgid "List of the connected conveyors' ID"
msgstr ""

#: ../../source/api_doc/api.rst:162
msgid "Vision"
msgstr ""

#: api.tcp_client.NiryoRobot.get_img_compressed:1 of
msgid ""
"Get image from video stream in a compressed format.  Use "
"``uncompress_image`` from the vision package to uncompress it"
msgstr ""

#: api.tcp_client.NiryoRobot.get_img_compressed:4 of
msgid "string containing a JPEG compressed image"
msgstr ""

#: api.tcp_client.NiryoRobot.set_brightness:1 of
msgid "Modify video stream brightness"
msgstr ""

#: api.tcp_client.NiryoRobot.set_brightness:3 of
msgid ""
"How much to adjust the brightness. 0.5 will give a darkened image, 1 will"
" give the original image while 2 will enhance the brightness by a factor "
"of 2."
msgstr ""

#: api.tcp_client.NiryoRobot.set_contrast:1 of
msgid "Modify video stream contrast"
msgstr ""

#: api.tcp_client.NiryoRobot.set_contrast:3 of
msgid ""
"While a factor of 1 gives original image. Making the factor towards 0 "
"makes the image greyer, while factor>1 increases the contrast of the "
"image."
msgstr ""

#: api.tcp_client.NiryoRobot.set_saturation:1 of
msgid "Modify video stream saturation"
msgstr ""

#: api.tcp_client.NiryoRobot.set_saturation:3 of
msgid ""
"How much to adjust the saturation. 0 will give a black and white image, 1"
" will give the original image while 2 will enhance the saturation by a "
"factor of 2."
msgstr ""

#: api.tcp_client.NiryoRobot.get_image_parameters:1 of
msgid ""
"Get last stream image parameters: Brightness factor, Contrast factor, "
"Saturation factor."
msgstr ""

#: api.tcp_client.NiryoRobot.get_image_parameters:3 of
msgid ""
"Brightness factor: How much to adjust the brightness. 0.5 will give a "
"darkened image, 1 will give the original image while 2 will enhance the "
"brightness by a factor of 2."
msgstr ""

#: api.tcp_client.NiryoRobot.get_image_parameters:6 of
msgid ""
"Contrast factor: A factor of 1 gives original image. Making the factor "
"towards 0 makes the image greyer, while factor>1 increases the contrast "
"of the image."
msgstr ""

#: api.tcp_client.NiryoRobot.get_image_parameters:9 of
msgid ""
"Saturation factor: 0 will give a black and white image, 1 will give the "
"original image while 2 will enhance the saturation by a factor of 2."
msgstr ""

#: api.tcp_client.NiryoRobot.get_image_parameters:12 of
msgid "Brightness factor, Contrast factor, Saturation factor"
msgstr ""

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:1 of
msgid ""
"Given a pose (x_rel, y_rel, yaw_rel) relative to a workspace, this "
"function returns the robot pose in which the current tool will be able to"
" pick an object at this pose."
msgstr ""

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:4 of
msgid ""
"The height_offset argument (in m) defines how high the tool will hover "
"over the workspace. If height_offset = 0, the tool will nearly touch the "
"workspace."
msgstr ""

#: api.tcp_client.NiryoRobot.detect_object:3
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:4
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:7
#: api.tcp_client.NiryoRobot.move_to_object:3
#: api.tcp_client.NiryoRobot.vision_pick:20 of
msgid "name of the workspace"
msgstr ""

#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:6
#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:9
#: api.tcp_client.NiryoRobot.move_to_object:5
#: api.tcp_client.NiryoRobot.vision_pick:22 of
msgid "offset between the workspace and the target height"
msgstr ""

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:11 of
msgid "x relative pose (between 0 and 1)"
msgstr ""

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:13 of
msgid "y relative pose (between 0 and 1)"
msgstr ""

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:15 of
msgid "Angle in radians"
msgstr ""

#: api.tcp_client.NiryoRobot.get_target_pose_from_rel:18 of
msgid "target_pose"
msgstr ""

#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:1 of
msgid ""
"First detects the specified object using the camera and then returns the "
"robot pose in which the object can be picked with the current tool"
msgstr ""

#: api.tcp_client.NiryoRobot.detect_object:5
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:8
#: api.tcp_client.NiryoRobot.move_to_object:7
#: api.tcp_client.NiryoRobot.vision_pick:24 of
msgid "shape of the target"
msgstr ""

#: api.tcp_client.NiryoRobot.detect_object:7
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:10
#: api.tcp_client.NiryoRobot.move_to_object:9
#: api.tcp_client.NiryoRobot.vision_pick:26 of
msgid "color of the target"
msgstr ""

#: api.tcp_client.NiryoRobot.detect_object:9
#: api.tcp_client.NiryoRobot.get_target_pose_from_cam:12 of
msgid "object_found, object_pose, object_shape, object_color"
msgstr ""

#: api.tcp_client.NiryoRobot.vision_pick:1 of
msgid ""
"Picks the specified object from the workspace. This function has multiple"
" phases:"
msgstr ""

#: api.tcp_client.NiryoRobot.vision_pick:3 of
msgid "1. detect object using the camera"
msgstr ""

#: api.tcp_client.NiryoRobot.vision_pick:4 of
msgid "2. prepare the current tool for picking"
msgstr ""

#: api.tcp_client.NiryoRobot.vision_pick:5 of
msgid "3. approach the object"
msgstr ""

#: api.tcp_client.NiryoRobot.vision_pick:6 of
msgid "4. move down to the correct picking pose"
msgstr ""

#: api.tcp_client.NiryoRobot.vision_pick:7 of
msgid "5. actuate the current tool"
msgstr ""

#: api.tcp_client.NiryoRobot.vision_pick:8 of
msgid "6. lift the object"
msgstr ""

#: api.tcp_client.NiryoRobot.vision_pick:10 of
msgid "Example::"
msgstr ""

#: api.tcp_client.NiryoRobot.move_to_object:11
#: api.tcp_client.NiryoRobot.vision_pick:28 of
msgid "object_found, object_shape, object_color"
msgstr ""

#: api.tcp_client.NiryoRobot.move_to_object:1 of
msgid "Same as `get_target_pose_from_cam` but directly moves to this position"
msgstr ""

#: api.tcp_client.NiryoRobot.detect_object:1 of
msgid "Detect object in workspace and return its pose and characteristics"
msgstr ""

#: api.tcp_client.NiryoRobot.get_camera_intrinsics:1 of
msgid "Get calibration object: camera intrinsics, distortions coefficients"
msgstr ""

#: api.tcp_client.NiryoRobot.get_camera_intrinsics:3 of
msgid "camera intrinsics, distortions coefficients"
msgstr ""

#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses:1 of
msgid ""
"Save workspace by giving the poses of the robot to point its 4 corners "
"with the calibration Tip. Corners should be in the good order. Markers' "
"pose will be deduced from these poses"
msgstr ""

#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses:5 of
msgid "Poses should be either a list [x, y, z, roll, pitch, yaw] or a PoseObject"
msgstr ""

#: api.tcp_client.NiryoRobot.save_workspace_from_points:4
#: api.tcp_client.NiryoRobot.save_workspace_from_robot_poses:7 of
msgid "workspace name, maximum lenght 30 char."
msgstr ""

#: api.tcp_client.NiryoRobot.save_workspace_from_points:1 of
msgid ""
"Save workspace by giving the points of worskpace's 4 corners. Points are "
"written as [x, y, z] Corners should be in the good order."
msgstr ""

#: api.tcp_client.NiryoRobot.delete_workspace:1 of
msgid "Delete workspace from robot's memory"
msgstr ""

#: api.tcp_client.NiryoRobot.get_workspace_ratio:1 of
msgid "Get workspace ratio from robot's memory"
msgstr ""

#: api.tcp_client.NiryoRobot.get_workspace_list:1 of
msgid "Get list of workspaces' name store in robot's memory"
msgstr ""

#: ../../source/api_doc/api.rst:182
msgid "Led Ring"
msgstr ""

#: api.tcp_client.NiryoRobot.set_led_color:1 of
msgid "Lights up an LED in one colour. RGB colour between 0 and 255."
msgstr ""

#: api.tcp_client.NiryoRobot.set_led_color:7 of
msgid "Id of the led: between 0 and 29"
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_breath:9
#: api.tcp_client.NiryoRobot.led_ring_chase:10
#: api.tcp_client.NiryoRobot.led_ring_flashing:13
#: api.tcp_client.NiryoRobot.led_ring_go_up:10
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:10
#: api.tcp_client.NiryoRobot.led_ring_snake:8
#: api.tcp_client.NiryoRobot.led_ring_solid:7
#: api.tcp_client.NiryoRobot.led_ring_wipe:9
#: api.tcp_client.NiryoRobot.set_led_color:9 of
msgid "Led color in a list of size 3[R, G, B]. RGB channels from 0 to 255."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_solid:1 of
msgid "Set the whole Led Ring to a fixed color."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_turn_off:1 of
msgid "Turn off all LEDs"
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_flashing:1 of
msgid ""
"Flashes a color according to a frequency. The frequency is equal to 1 / "
"period."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_alternate:3
#: api.tcp_client.NiryoRobot.led_ring_breath:3
#: api.tcp_client.NiryoRobot.led_ring_chase:3
#: api.tcp_client.NiryoRobot.led_ring_flashing:3
#: api.tcp_client.NiryoRobot.led_ring_go_up:3
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:3
#: api.tcp_client.NiryoRobot.led_ring_rainbow:3
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:3
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:3
#: api.tcp_client.NiryoRobot.led_ring_snake:3
#: api.tcp_client.NiryoRobot.led_ring_wipe:3 of
msgid "Examples: ::"
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_alternate:17
#: api.tcp_client.NiryoRobot.led_ring_breath:11
#: api.tcp_client.NiryoRobot.led_ring_chase:12
#: api.tcp_client.NiryoRobot.led_ring_flashing:15
#: api.tcp_client.NiryoRobot.led_ring_go_up:12
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:12
#: api.tcp_client.NiryoRobot.led_ring_rainbow:9
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:9
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:9
#: api.tcp_client.NiryoRobot.led_ring_wipe:11 of
msgid ""
"Execution time for a pattern in seconds. If 0, the default time will be "
"used."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_flashing:17 of
msgid "Number of consecutive flashes. If 0, the Led Ring flashes endlessly."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_alternate:21
#: api.tcp_client.NiryoRobot.led_ring_chase:17
#: api.tcp_client.NiryoRobot.led_ring_flashing:19 of
msgid ""
"The service wait for the animation to finish all iterations or not to "
"answer. If iterations is 0, the service answers immediately."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_alternate:1 of
msgid "Several colors are alternated one after the other."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_alternate:15 of
msgid "Led color list of lists of size 3[R, G, B]. RGB channels from 0 to 255."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_alternate:19 of
msgid ""
"Number of consecutive alternations. If 0, the Led Ring alternates "
"endlessly."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_chase:1 of
msgid "Movie theater light style chaser animation."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_chase:14 of
msgid ""
"Number of consecutive chase. If 0, the animation continues endlessly. One"
" chase just lights one Led every 3 LEDs."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_wipe:1 of
msgid "Wipe a color across the Led Ring, light a Led at a time."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_wipe:13 of
msgid "The service wait for the animation to finish or not to answer."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_rainbow:1 of
msgid "Draw rainbow that fades across all LEDs at once."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_rainbow:11 of
msgid "Number of consecutive rainbows. If 0, the animation continues endlessly."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_breath:16
#: api.tcp_client.NiryoRobot.led_ring_go_up:17
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:17
#: api.tcp_client.NiryoRobot.led_ring_rainbow:13
#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:13
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:13
#: api.tcp_client.NiryoRobot.led_ring_snake:15 of
msgid ""
"The service wait for the animation to finish or not to answer. If "
"iterations is 0, the service answers immediately."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:1 of
msgid "Draw rainbow that uniformly distributes itself across all LEDs."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:11
#: api.tcp_client.NiryoRobot.led_ring_rainbow_cycle:11 of
msgid ""
"Number of consecutive rainbow cycles. If 0, the animation continues "
"endlessly."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_rainbow_chase:1 of
msgid "Rainbow chase animation, like the led_ring_chase method."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_go_up:1 of
msgid "LEDs turn on like a loading circle, and are then all turned off at once."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_breath:13
#: api.tcp_client.NiryoRobot.led_ring_go_up:14
#: api.tcp_client.NiryoRobot.led_ring_go_up_down:14
#: api.tcp_client.NiryoRobot.led_ring_snake:12 of
msgid ""
"Number of consecutive turns around the Led Ring. If 0, the animation "
"continues endlessly."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_go_up_down:1 of
msgid "LEDs turn on like a loading circle, and are turned off the same way."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_breath:1 of
msgid ""
"Variation of the light intensity of the LED ring, similar to human "
"breathing."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_snake:1 of
msgid "A small coloured snake (certainly a python :D ) runs around the LED ring."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_snake:10 of
msgid ""
"Execution time for a pattern in seconds. If 0, the default duration will "
"be used."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_custom:1 of
msgid ""
"Sends a colour command to all LEDs of the LED ring. The function expects "
"a list of colours for the 30 LEDs  of the robot."
msgstr ""

#: api.tcp_client.NiryoRobot.led_ring_custom:9 of
msgid ""
"List of size 30 of led color in a list of size 3[R, G, B]. RGB channels "
"from 0 to 255."
msgstr ""

#: ../../source/api_doc/api.rst:200
msgid "Sound"
msgstr ""

#: api.tcp_client.NiryoRobot.get_sounds:1 of
msgid "Get sound name list"
msgstr ""

#: api.tcp_client.NiryoRobot.get_sounds:3 of
msgid "list of the sounds of the robot"
msgstr ""

#: api.tcp_client.NiryoRobot.play_sound:1 of
msgid "Play a sound from the robot"
msgstr ""

#: api.tcp_client.NiryoRobot.play_sound:3 of
msgid "Name of the sound to play"
msgstr ""

#: api.tcp_client.NiryoRobot.play_sound:5 of
msgid "wait for the end of the sound before exiting the function"
msgstr ""

#: api.tcp_client.NiryoRobot.play_sound:7 of
msgid "start the sound from this value in seconds"
msgstr ""

#: api.tcp_client.NiryoRobot.play_sound:9 of
msgid "end the sound at this value in seconds"
msgstr ""

#: api.tcp_client.NiryoRobot.set_volume:1 of
msgid "Set the volume percentage of the robot."
msgstr ""

#: api.tcp_client.NiryoRobot.set_volume:3 of
msgid "volume percentage of the sound (0: no sound, 100: max sound)"
msgstr ""

#: api.tcp_client.NiryoRobot.stop_sound:1 of
msgid "Stop a sound being played."
msgstr ""

#: api.tcp_client.NiryoRobot.get_sound_duration:1 of
msgid ""
"Returns the duration in seconds of a sound stored in the robot database "
"raise SoundRosWrapperException if the sound doesn't exists"
msgstr ""

#: api.tcp_client.NiryoRobot.get_sound_duration:4 of
msgid "name of sound"
msgstr ""

#: api.tcp_client.NiryoRobot.get_sound_duration:6 of
msgid "sound duration in seconds"
msgstr ""

#: api.tcp_client.NiryoRobot.say:1 of
msgid ""
"Use gtts (Google Text To Speech) to interprete a string as sound "
"Languages available are: * English: 0 * French: 1 * Spanish: 2 * "
"Mandarin: 3 * Portuguese: 4"
msgstr ""

#: api.tcp_client.NiryoRobot.say:9 of
msgid "Example ::"
msgstr ""

#: api.tcp_client.NiryoRobot.say:15 of
msgid "Text that needs to be spoken < 100 char"
msgstr ""

#: api.tcp_client.NiryoRobot.say:17 of
msgid "language of the text"
msgstr ""

#: ../../source/api_doc/api.rst:211
msgid "Enums"
msgstr ""

#: ../../source/api_doc/api.rst:213
msgid "Enums are used to pass specific parameters to functions."
msgstr ""

#: ../../source/api_doc/api.rst:215
msgid ""
"For instance, :meth:`~.api.tcp_client.NiryoRobot.shift_pose` will need a "
"parameter from :class:`~.api.objects.RobotAxis` enum ::"
msgstr ""

#: ../../source/api_doc/api.rst:221
msgid "List of enums:"
msgstr ""

#: ../../source/api_doc/api.rst:223
msgid ":class:`~.api.enums_communication.CalibrateMode`"
msgstr ""

#: ../../source/api_doc/api.rst:224
msgid ":class:`~.api.enums_communication.RobotAxis`"
msgstr ""

#: ../../source/api_doc/api.rst:225
msgid ":class:`~.api.enums_communication.ToolID`"
msgstr ""

#: ../../source/api_doc/api.rst:226
msgid ":class:`~.api.enums_communication.PinMode`"
msgstr ""

#: ../../source/api_doc/api.rst:227
msgid ":class:`~.api.enums_communication.PinState`"
msgstr ""

#: ../../source/api_doc/api.rst:228
msgid ":class:`~.api.enums_communication.PinID`"
msgstr ""

#: ../../source/api_doc/api.rst:229
msgid ":class:`~.api.enums_communication.ConveyorID`"
msgstr ""

#: ../../source/api_doc/api.rst:230
msgid ":class:`~.api.enums_communication.ConveyorDirection`"
msgstr ""

#: ../../source/api_doc/api.rst:231
msgid ":class:`~.api.enums_communication.ObjectColor`"
msgstr ""

#: ../../source/api_doc/api.rst:232
msgid ":class:`~.api.enums_communication.ObjectShape`"
msgstr ""

#: api.enums_communication.CalibrateMode:1 of
msgid "Enumeration of Calibration Modes"
msgstr ""

#: api.enums_communication.RobotAxis:1 of
msgid "Enumeration of Robot Axis : it used for Shift command"
msgstr ""

#: api.enums_communication.ToolID:1 of
msgid "Enumeration of Tools IDs"
msgstr ""

#: api.enums_communication.PinMode:1 of
msgid "Enumeration of Pin Modes"
msgstr ""

#: api.enums_communication.PinState:1 of
msgid "Pin State is either LOW or HIGH"
msgstr ""

#: api.enums_communication.PinID:1 of
msgid "Enumeration of Robot Pins"
msgstr ""

#: api.enums_communication.ConveyorID:1 of
msgid "Enumeration of Conveyor IDs used for Conveyor control"
msgstr ""

#: api.enums_communication.ConveyorDirection:1 of
msgid "Enumeration of Conveyor Directions used for Conveyor control"
msgstr ""

#: api.enums_communication.ObjectColor:1 of
msgid "Enumeration of Colors available for image processing"
msgstr ""

#: api.enums_communication.ObjectShape:1 of
msgid "Enumeration of Shapes available for image processing"
msgstr ""

#: ../../source/api_doc/api.rst:245
msgid "Python object classes"
msgstr ""

#: ../../source/api_doc/api.rst:247
msgid "Special objects"
msgstr ""

#: api.objects.PoseObject:1 of
msgid "Pose object which stores x, y, z, roll, pitch & yaw parameters"
msgstr ""

#: api.objects.PoseObject.copy_with_offsets:1 of
msgid "Create a new pose from copying from copying actual pose with offsets"
msgstr ""

#: api.objects.PoseObject.to_list:1 of
msgid ""
"Return a list [x, y, z, roll, pitch, yaw] corresponding to the pose's "
"parameters"
msgstr ""

#: api.objects.HardwareStatusObject:1 of
msgid "Object used to store every hardware information"
msgstr ""

#: api.objects.AnalogPinObject:1 api.objects.DigitalPinObject:1 of
msgid "Object used to store information on digital pins"
msgstr ""

#~ msgid ""
#~ "This file presents the different "
#~ ":ref:`Command Functions`, :ref:`Enums` & "
#~ ":ref:`Python Objects <Python Object classes>`"
#~ " available with the API"
#~ msgstr ""

#~ msgid "Command Functions"
#~ msgstr ""

#~ msgid "Close connection with robot"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid "Connect to the TCP Server"
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "IP Address"
#~ msgstr ""

#~ msgid ""
#~ "Calibrate (manually or automatically) motors."
#~ " Automatic calibration will do nothing "
#~ "if motors are already calibrated"
#~ msgstr ""

#~ msgid "Auto or Manual"
#~ msgstr ""

#~ msgid "Start a automatic motors calibration if motors are not calibrated yet"
#~ msgstr ""

#~ msgid "Return a bool indicating whereas the robot motors need to be calibrate"
#~ msgstr ""

#~ msgid "Get learning mode state"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "``True`` if learning mode is on"
#~ msgstr ""

#~ msgid "Set learning mode if param is ``True``, else turn it off"
#~ msgstr ""

#~ msgid "``True`` or ``False``"
#~ msgstr ""

#~ msgid "Limit arm max velocity to a percentage of its maximum velocity"
#~ msgstr ""

#~ msgid "Should be between 1 & 100"
#~ msgstr ""

#~ msgid "Set jog control mode if param is True, else turn it off"
#~ msgstr ""

#~ msgid "Wait for a certain time"
#~ msgstr ""

#~ msgid "duration in seconds"
#~ msgstr ""

#~ msgid "Get joints value in radians You can also use a getter ::"
#~ msgstr ""

#~ msgid "List of joints value"
#~ msgstr ""

#~ msgid ""
#~ "Get end effector link pose as [x,"
#~ " y, z, roll, pitch, yaw]. x, y"
#~ " & z are expressed in meters /"
#~ " roll, pitch & yaw are expressed "
#~ "in radians You can also use a "
#~ "getter ::"
#~ msgstr ""

#~ msgid "Get end effector link pose in Quaternion coordinates"
#~ msgstr ""

#~ msgid ""
#~ "Position and quaternion coordinates "
#~ "concatenated in a list : [x, y,"
#~ " z, qx, qy, qz, qw]"
#~ msgstr ""

#~ msgid "Move robot joints. Joints are expressed in radians."
#~ msgstr ""

#~ msgid "All lines of the next example realize the same operation: ::"
#~ msgstr ""

#~ msgid "either 6 args (1 for each joints) or a list of 6 joints"
#~ msgstr ""

#~ msgid ""
#~ "Move robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw) "
#~ "pose. x, y & z are expressed "
#~ "in meters / roll, pitch & yaw "
#~ "are expressed in radians"
#~ msgstr ""

#~ msgid ""
#~ "either 6 args (1 for each "
#~ "coordinates) or a list of 6 "
#~ "coordinates or a ``PoseObject``"
#~ msgstr ""

#~ msgid ""
#~ "Move robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw) "
#~ "pose with a linear trajectory"
#~ msgstr ""

#~ msgid ""
#~ "either 6 args (1 for each "
#~ "coordinates) or a list of 6 "
#~ "coordinates or a PoseObject"
#~ msgstr ""

#~ msgid "Shift robot end effector pose along one axis"
#~ msgstr ""

#~ msgid "Axis along which the robot is shifted"
#~ msgstr ""

#~ msgid "In meter for X/Y/Z and radians for roll/pitch/yaw"
#~ msgstr ""

#~ msgid "Shift robot end effector pose along one axis, with a linear trajectory"
#~ msgstr ""

#~ msgid ""
#~ "Jog robot joints'. Jog corresponds to"
#~ " a shift without motion planning. "
#~ "Values are expressed in radians."
#~ msgstr ""

#~ msgid "either 6 args (1 for each joints) or a list of 6 joints offset"
#~ msgstr ""

#~ msgid ""
#~ "Jog robot end effector pose Jog "
#~ "corresponds to a shift without motion"
#~ " planning Arguments are [dx, dy, dz,"
#~ " d_roll, d_pitch, d_yaw] dx, dy & "
#~ "dz are expressed in meters / "
#~ "d_roll, d_pitch & d_yaw are expressed"
#~ " in radians"
#~ msgstr ""

#~ msgid "either 6 args (1 for each coordinates) or a list of 6 offset"
#~ msgstr ""

#~ msgid "Move to a position where the forearm lays on shoulder"
#~ msgstr ""

#~ msgid "Go to home pose and activate learning mode"
#~ msgstr ""

#~ msgid ""
#~ "Compute forward kinematics of a given"
#~ " joints configuration and give the "
#~ "associated spatial pose"
#~ msgstr ""

#~ msgid "Compute inverse kinematics"
#~ msgstr ""

#~ msgid "Get pose saved in from Ned's memory"
#~ msgstr ""

#~ msgid "Pose name in robot's memory"
#~ msgstr ""

#~ msgid "Pose associated to pose_name"
#~ msgstr ""

#~ msgid "Save pose in robot's memory"
#~ msgstr ""

#~ msgid "Delete pose from robot's memory"
#~ msgstr ""

#~ msgid "Get list of poses' name saved in robot memory"
#~ msgstr ""

#~ msgid "Execute a picking from a pose."
#~ msgstr ""

#~ msgid "A picking is described as :"
#~ msgstr ""

#~ msgid "* going over the object"
#~ msgstr ""

#~ msgid "* going down until height = z"
#~ msgstr ""

#~ msgid "* grasping with tool"
#~ msgstr ""

#~ msgid "* going back over the object"
#~ msgstr ""

#~ msgid "Execute a placing from a position."
#~ msgstr ""

#~ msgid "A placing is described as :"
#~ msgstr ""

#~ msgid "* going over the place"
#~ msgstr ""

#~ msgid "* releasing the object with tool"
#~ msgstr ""

#~ msgid "* going back over the place"
#~ msgstr ""

#~ msgid "Execute a pick then a place"
#~ msgstr ""

#~ msgid "Pick Pose : [x, y, z, roll, pitch, yaw] or PoseObject"
#~ msgstr ""

#~ msgid "Place Pose : [x, y, z, roll, pitch, yaw] or PoseObject"
#~ msgstr ""

#~ msgid "Distance from waypoints before smoothing trajectory"
#~ msgstr ""

#~ msgid "Get trajectory saved in Ned's memory"
#~ msgstr ""

#~ msgid "Trajectory"
#~ msgstr ""

#~ msgid "Execute trajectory from Ned's memory"
#~ msgstr ""

#~ msgid "Execute trajectory from list of poses"
#~ msgstr ""

#~ msgid "List of [x,y,z,qx,qy,qz,qw]"
#~ msgstr ""

#~ msgid "Save trajectory in robot memory"
#~ msgstr ""

#~ msgid "Delete trajectory from robot's memory"
#~ msgstr ""

#~ msgid "Get list of trajectories' name saved in robot memory"
#~ msgstr ""

#~ msgid "Get equipped tool Id"
#~ msgstr ""

#~ msgid "Update equipped tool"
#~ msgstr ""

#~ msgid ""
#~ "Grasp with tool | This action "
#~ "correspond to | - Close gripper "
#~ "for Grippers | - Pull Air for "
#~ "Vacuum pump | - Activate for "
#~ "Electromagnet"
#~ msgstr ""

#~ msgid ""
#~ "Release with tool | This action "
#~ "correspond to | - Open gripper for"
#~ " Grippers | - Push Air for "
#~ "Vacuum pump | - Deactivate for "
#~ "Electromagnet"
#~ msgstr ""

#~ msgid "Open gripper associated to 'gripper_id' with a speed 'speed'"
#~ msgstr ""

#~ msgid "Between 100 & 1000"
#~ msgstr ""

#~ msgid "Close gripper associated to 'gripper_id' with a speed 'speed'"
#~ msgstr ""

#~ msgid "Pull air of vacuum pump"
#~ msgstr ""

#~ msgid "Push air of vacuum pump"
#~ msgstr ""

#~ msgid "Setup electromagnet on pin"
#~ msgstr ""

#~ msgid "Activate electromagnet associated to electromagnet_id on pin_id"
#~ msgstr ""

#~ msgid "Deactivate electromagnet associated to electromagnet_id on pin_id"
#~ msgstr ""

#~ msgid "Set pin number pin_id to mode pin_mode"
#~ msgstr ""

#~ msgid "Set pin_id state to digital_state"
#~ msgstr ""

#~ msgid "Read pin number pin_id and return its state"
#~ msgstr ""

#~ msgid ""
#~ "Get hardware status : Temperature, "
#~ "Hardware version, motors names & types"
#~ " ..."
#~ msgstr ""

#~ msgid "Infos contains in a HardwareStatusObject"
#~ msgstr ""

#~ msgid "Get Digital IO state : Names, modes, states"
#~ msgstr ""

#~ msgid "List of DigitalPinObject instance"
#~ msgstr ""

#~ msgid "Activate a new conveyor and return its ID"
#~ msgstr ""

#~ msgid ":return : New conveyor ID :rtype: ConveyorID"
#~ msgstr ""

#~ msgid "Remove specific conveyor."
#~ msgstr ""

#~ msgid "Basically, ConveyorID.ONE or ConveyorID.TWO"
#~ msgstr ""

#~ msgid "Run conveyor at id 'conveyor_id'"
#~ msgstr ""

#~ msgid "Stop conveyor at id 'conveyor_id'"
#~ msgstr ""

#~ msgid "Control conveyor at id 'conveyor_id'"
#~ msgstr ""

#~ msgid "New speed which is a percentage of maximum speed"
#~ msgstr ""

#~ msgid "Conveyor direction"
#~ msgstr ""

#~ msgid "List of the connected conveyors' ID"
#~ msgstr ""

#~ msgid ""
#~ "Get image from video stream in a"
#~ " compressed format.  Use ``uncompress_image`` "
#~ "from the vision package to uncompress"
#~ " it"
#~ msgstr ""

#~ msgid "string containing a JPEG compressed image"
#~ msgstr ""

#~ msgid ""
#~ "Given a pose (x_rel, y_rel, yaw_rel) "
#~ "relative to a workspace, this function"
#~ " returns the robot pose in which "
#~ "the current tool will be able to"
#~ " pick an object at this pose."
#~ msgstr ""

#~ msgid ""
#~ "The height_offset argument (in m) "
#~ "defines how high the tool will "
#~ "hover over the workspace. If "
#~ "height_offset = 0, the tool will "
#~ "nearly touch the workspace."
#~ msgstr ""

#~ msgid "name of the workspace"
#~ msgstr ""

#~ msgid "offset between the workspace and the target height"
#~ msgstr ""

#~ msgid "x relative pose (between 0 and 1)"
#~ msgstr ""

#~ msgid "y relative pose (between 0 and 1)"
#~ msgstr ""

#~ msgid "Angle in radians"
#~ msgstr ""

#~ msgid "target_pose"
#~ msgstr ""

#~ msgid ""
#~ "First detects the specified object using"
#~ " the camera and then returns the "
#~ "robot pose in which the object can"
#~ " be picked with the current tool"
#~ msgstr ""

#~ msgid "shape of the target"
#~ msgstr ""

#~ msgid "color of the target"
#~ msgstr ""

#~ msgid "object_found, object_pose, object_shape, object_color"
#~ msgstr ""

#~ msgid ""
#~ "Picks the specified object from the "
#~ "workspace. This function has multiple "
#~ "phases:"
#~ msgstr ""

#~ msgid "1. detect object using the camera"
#~ msgstr ""

#~ msgid "2. prepare the current tool for picking"
#~ msgstr ""

#~ msgid "3. approach the object"
#~ msgstr ""

#~ msgid "4. move down to the correct picking pose"
#~ msgstr ""

#~ msgid "5. actuate the current tool"
#~ msgstr ""

#~ msgid "6. lift the object"
#~ msgstr ""

#~ msgid "Example::"
#~ msgstr ""

#~ msgid "object_found, object_shape, object_color"
#~ msgstr ""

#~ msgid "Same as `get_target_pose_from_cam` but directly moves to this position"
#~ msgstr ""

#~ msgid "Detect object in workspace and return its pose and characteristics"
#~ msgstr ""

#~ msgid "Get calibration object: camera intrinsics, distortions coefficients"
#~ msgstr ""

#~ msgid "camera intrinsics, distortions coefficients"
#~ msgstr ""

#~ msgid ""
#~ "Save workspace by giving the poses "
#~ "of the robot to point its 4 "
#~ "corners with the calibration Tip. "
#~ "Corners should be in the good "
#~ "order. Markers' pose will be deduced "
#~ "from these poses"
#~ msgstr ""

#~ msgid ""
#~ "Poses should be either a list [x,"
#~ " y, z, roll, pitch, yaw] or a"
#~ " PoseObject"
#~ msgstr ""

#~ msgid "workspace name"
#~ msgstr ""

#~ msgid ""
#~ "Save workspace by giving the points "
#~ "of worskpace's 4 corners. Points are "
#~ "written as [x, y, z] Corners "
#~ "should be in the good order."
#~ msgstr ""

#~ msgid "Delete workspace from robot's memory"
#~ msgstr ""

#~ msgid "Get workspace ratio from robot's memory"
#~ msgstr ""

#~ msgid "Get list of workspaces' name store in robot's memory"
#~ msgstr ""

#~ msgid "Enumeration of Calibration Modes"
#~ msgstr ""

#~ msgid "Enumeration of Robot Axis : it used for Shift command"
#~ msgstr ""

#~ msgid "Enumeration of Tools IDs"
#~ msgstr ""

#~ msgid "Enumeration of Pin Modes"
#~ msgstr ""

#~ msgid "Pin State is either LOW or HIGH"
#~ msgstr ""

#~ msgid "Enumeration of Robot Pins"
#~ msgstr ""

#~ msgid "Enumeration of Conveyor IDs used for Conveyor control"
#~ msgstr ""

#~ msgid "Enumeration of Conveyor Directions used for Conveyor control"
#~ msgstr ""

#~ msgid "Enumeration of Colors available for image processing"
#~ msgstr ""

#~ msgid "Enumeration of Shapes available for image processing"
#~ msgstr ""

#~ msgid "Pose object which stores x, y, z, roll, pitch & yaw parameters"
#~ msgstr ""

#~ msgid "Create a new pose from copying from copying actual pose with offsets"
#~ msgstr ""

#~ msgid ""
#~ "Return a list [x, y, z, roll, "
#~ "pitch, yaw] corresponding to the pose's"
#~ " parameters"
#~ msgstr ""

#~ msgid "Object used to store every hardware information"
#~ msgstr ""

#~ msgid "Object used to store information on digital pins"
#~ msgstr ""

#~ msgid "toto"
#~ msgstr ""

#~ msgid ""
#~ "This file presents the different "
#~ ":ref:`Command Functions`, :ref:`Enums` & "
#~ ":ref:`Python Objects <Python Object classes>`"
#~ " available with the API."
#~ msgstr ""

#~ msgid ""
#~ "This file presents the different "
#~ ":ref:`Command Functions`, :ref:`Enums` & "
#~ ":ref:`Python object classes` available with"
#~ " the API."
#~ msgstr ""

#~ msgid ""
#~ ":ref:`Command Functions` are used to "
#~ "deal directly with the robot. It "
#~ "could be :meth:`~.api.tcp_client.NiryoRobot.move_joints`,"
#~ " :meth:`~.api.tcp_client.NiryoRobot.get_hardware_status` "
#~ ":meth:`~.api.tcp_client.NiryoRobot.vision_pick`, or also"
#~ " :meth:`~.api.tcp_client.NiryoRobot.run_conveyor`"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`Enums` are used to pass specific"
#~ " arguments to functions. For instance "
#~ ":class:`~.api.enums_communication.PinState`, "
#~ ":class:`~.api.enums_communication.ConveyorDirection`, ..."
#~ msgstr ""

#~ msgid ""
#~ ":ref:`Python Objects <Python Object classes>`,"
#~ " as |pose_object|, ease some operations"
#~ msgstr ""

#~ msgid "See examples on :ref:`Examples Section <Examples: Basics>`"
#~ msgstr ""

#~ msgid "Special objects :D"
#~ msgstr ""

#~ msgid "workspace name, maximum lenght 30 char."
#~ msgstr ""

#~ msgid ""
#~ "For instance, "
#~ ":meth:`~.api.tcp_client.NiryoRobot.change_tool` will need"
#~ " a parameter from :class:`~.api.objects.ToolID`"
#~ " enum ::"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.CalibrateMode`"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.RobotAxis`"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.ToolID`"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.PinMode`"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.PinState`"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.PinID`"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.ConveyorID`"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.ConveyorDirection`"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.ObjectColor`"
#~ msgstr ""

#~ msgid ":class:`~.api.objects.ObjectShape`"
#~ msgstr ""

#~ msgid ""
#~ "This file presents the different "
#~ ":ref:`source/api_doc/api:Command Functions`, "
#~ ":ref:`source/api_doc/api:Enums` & "
#~ ":ref:`source/api_doc/api:Python Object classes` "
#~ "available with the API"
#~ msgstr ""

#~ msgid ""
#~ "This section references all existing "
#~ "functions to control your robot, which"
#~ " includes"
#~ msgstr ""

#~ msgid "List of [x,y,z,qx,qy,qz,qw] or list of [x,y,z,roll,pitch,yaw]"
#~ msgstr ""

#~ msgid "Execute trajectory from list of poses and joints"
#~ msgstr ""

#~ msgid ""
#~ "List of [x,y,z,qx,qy,qz,qw] or list of"
#~ " [x,y,z,roll,pitch,yaw] or a list of "
#~ "[j1,j2,j3,j4,j5,j6]"
#~ msgstr ""

#~ msgid ""
#~ "List of string 'pose' or 'joint', "
#~ "or ['pose'] (if poses only) or "
#~ "['joint'] (if joints only).  If None,"
#~ " it is assumed there are only "
#~ "poses in the list."
#~ msgstr ""

#~ msgid ""
#~ "Enables or disables the TCP function "
#~ "(Tool Center Point). If activation is"
#~ " requested, the last recorded TCP "
#~ "value will be applied. The default "
#~ "value depends on the gripper equipped."
#~ " If deactivation is requested, the "
#~ "TCP will be coincident with the "
#~ "tool_link."
#~ msgstr ""

#~ msgid "True to enable, False otherwise."
#~ msgstr ""

#~ msgid ""
#~ "Activates the TCP function (Tool Center"
#~ " Point) and defines the transformation "
#~ "between the tool_link frame and the "
#~ "TCP frame."
#~ msgstr ""

#~ msgid ""
#~ "Reset the TCP (Tool Center Point) "
#~ "transformation. The TCP will be reset"
#~ " according to the tool equipped."
#~ msgstr ""

#~ msgid ""
#~ "Reboot the motor of the tool "
#~ "equipped. Useful when an Overload error"
#~ " occurs. (cf HardwareStatus)"
#~ msgstr ""

#~ msgid "Modify video stream brightness"
#~ msgstr ""

#~ msgid ""
#~ "How much to adjust the brightness. "
#~ "0.5 will give a darkened image, 1"
#~ " will give the original image while"
#~ " 2 will enhance the brightness by "
#~ "a factor of 2."
#~ msgstr ""

#~ msgid "Modify video stream contrast"
#~ msgstr ""

#~ msgid ""
#~ "While a factor of 1 gives original"
#~ " image. Making the factor towards 0"
#~ " makes the image greyer, while "
#~ "factor>1 increases the contrast of the"
#~ " image."
#~ msgstr ""

#~ msgid "Modify video stream saturation"
#~ msgstr ""

#~ msgid ""
#~ "How much to adjust the saturation. "
#~ "0 will give a black and white "
#~ "image, 1 will give the original "
#~ "image while 2 will enhance the "
#~ "saturation by a factor of 2."
#~ msgstr ""

#~ msgid ""
#~ "Get last stream image parameters: "
#~ "Brightness factor, Contrast factor, Saturation"
#~ " factor."
#~ msgstr ""

#~ msgid ""
#~ "Brightness factor: How much to adjust"
#~ " the brightness. 0.5 will give a "
#~ "darkened image, 1 will give the "
#~ "original image while 2 will enhance "
#~ "the brightness by a factor of 2."
#~ msgstr ""

#~ msgid ""
#~ "Contrast factor: A factor of 1 "
#~ "gives original image. Making the factor"
#~ " towards 0 makes the image greyer,"
#~ " while factor>1 increases the contrast "
#~ "of the image."
#~ msgstr ""

#~ msgid ""
#~ "Saturation factor: 0 will give a "
#~ "black and white image, 1 will give"
#~ " the original image while 2 will "
#~ "enhance the saturation by a factor "
#~ "of 2."
#~ msgstr ""

#~ msgid "Brightness factor, Contrast factor, Saturation factor"
#~ msgstr ""

#~ msgid "Led ring color, in a list of size 3 (r, g, b: 0.0 - 255.0)"
#~ msgstr ""

#~ msgid ""
#~ "Wait for the animation to finish "
#~ "or not to return.  For this "
#~ "method, the animation is quickly done,"
#~ " so waiting is also quick."
#~ msgstr ""

#~ msgid "Turn off all Leds"
#~ msgstr ""

#~ msgid "Flashes a color according to a frequency."
#~ msgstr ""

#~ msgid ""
#~ "flashing frequency, in Hertz. From 1 "
#~ "Hz to 100 Hz. If 0 or not"
#~ " filled, the default  frequency is "
#~ "used (4 Hz)"
#~ msgstr ""

#~ msgid "Number of consecutives flashes. If 0, the Led Ring flashes endlessly."
#~ msgstr ""

#~ msgid ""
#~ "Wait for the animation to finish "
#~ "all iterations or not to return. "
#~ "If iterations is 0, return immediatly."
#~ msgstr ""

#~ msgid ""
#~ "Number of consecutives alternations. If "
#~ "0, the Led Ring alternates endlessly."
#~ msgstr ""

#~ msgid ""
#~ "Speed of animation between each step,"
#~ " in milliseconde.  the bigger this "
#~ "param is, the slower the animation "
#~ "will be. If 0 or not filled, "
#~ "the default speed is used (50 ms)"
#~ msgstr ""

#~ msgid ""
#~ "Number of consecutives chase. If 0, "
#~ "the animation continues endlessly. One "
#~ "chase just lights one Led every 3"
#~ " Leds."
#~ msgstr ""

#~ msgid "Draw rainbow that fades across all Leds at once."
#~ msgstr ""

#~ msgid ""
#~ "Speed of animation between each step,"
#~ " in milliseconde.  the bigger this "
#~ "param is, the slower the animation "
#~ "will be. If 0 or not filled, "
#~ "the default speed is used (20 ms)"
#~ msgstr ""

#~ msgid ""
#~ "Number of consecutives rainbows. If 0,"
#~ " the animation continues endlessly."
#~ msgstr ""

#~ msgid "Draw rainbow that uniformly distributes itself across all Leds."
#~ msgstr ""

#~ msgid ""
#~ "Number of consecutives rainbow cycles. "
#~ "If 0, the animation continues endlessly."
#~ msgstr ""

#~ msgid ""
#~ "Leds turn on like a loading "
#~ "circle, and are then all turned "
#~ "off at once."
#~ msgstr ""

#~ msgid ""
#~ "Number of consecutives turns around the"
#~ " Led Ring. If 0, the animation  "
#~ "continues endlessly."
#~ msgstr ""

#~ msgid "Leds turn on like a loading circle, and are turned off the same way."
#~ msgstr ""

#~ msgid ""
#~ "Move robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw, "
#~ "frame_name) pose in the frame "
#~ "(frame_name) if defined. x, y & z"
#~ " are expressed in meters / roll, "
#~ "pitch & yaw are expressed in "
#~ "radians"
#~ msgstr ""

#~ msgid ""
#~ "and 1 for the frame name :type "
#~ "args: Union[tuple[float], list[float], PoseObject]"
#~ msgstr ""

#~ msgid ""
#~ "either 7 args (1 for each "
#~ "coordinates and 1 for the name of"
#~ " the frame) or a list of 6 "
#~ "coordinates or a ``PoseObject`` and 1"
#~ " for the frame name"
#~ msgstr ""

#~ msgid ""
#~ "either 7 args (1 for each "
#~ "coordinates and 1 for the name of"
#~ " the frame) or a list of 6 "
#~ "coordinates or a ``PoseObject``"
#~ msgstr ""

#~ msgid ""
#~ "and 1 for the frame name :type "
#~ "args: Union[tuple[float], list[float], PoseObject]"
#~ " :rtype: None"
#~ msgstr ""

#~ msgid ""
#~ "Reboot the motor of the tool "
#~ "equparam_list = [workspace_name] for pose "
#~ "in (pose_origin, pose_2, pose_3, pose_4):"
#~ msgstr ""

#~ msgid "for pose in (pose_origin, pose_2, pose_3, pose_4):"
#~ msgstr ""

#~ msgid ""
#~ "pose_list = self.__args_pose_to_list(pose) "
#~ "param_list.append(pose_list)ipped. Useful when an"
#~ " Overload error occurs. (cf HardwareStatus)"
#~ msgstr ""

#~ msgid ""
#~ "..automethod:: "
#~ "api.tcp_client.NiryoRobot.get_saved_dynamic_frame_list "
#~ "..automethod:: api.tcp_client.NiryoRobot.get_saved_dynamic_frame"
#~ " ..automethod:: "
#~ "api.tcp_client.NiryoRobot.save_dynamic_frame_from_poses "
#~ "..automethod:: "
#~ "api.tcp_client.NiryoRobot.save_dynamic_frame_from_points "
#~ "..automethod:: api.tcp_client.NiryoRobot.edit_dynamic_frame "
#~ "..automethod:: api.tcp_client.NiryoRobot.delete_dynamic_frame"
#~ " ..automethod:: api.tcp_client.NiryoRobot.move_relative "
#~ "..automethod:: api.tcp_client.NiryoRobot.move_linear_relative"
#~ msgstr ""

#~ msgid ""
#~ "Move robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw, "
#~ "frame_name) pose in a particular frame"
#~ " (frame_name) if defined x, y & "
#~ "z are expressed in meters / roll,"
#~ " pitch & yaw are expressed in "
#~ "radians"
#~ msgstr ""

#~ msgid ""
#~ "list_frame, list_desc = "
#~ "robot.frames.get_saved_dynamic_frame_list() print(list_frame)"
#~ " print(list_desc)"
#~ msgstr ""

#~ msgid "frame = robot.frames.get_saved_dynamic_frame(\"default_frame\")"
#~ msgstr ""

#~ msgid ""
#~ "pose_o = [0.1, 0.1, 0.1, 0, 0, "
#~ "0] pose_x = [0.2, 0.1, 0.1, 0, "
#~ "0, 0] pose_y = [0.1, 0.2, 0.1, "
#~ "0, 0, 0]"
#~ msgstr ""

#~ msgid ""
#~ "robot.frames.save_dynamic_frame_from_poses(\"name\", \"une "
#~ "description test\", pose_o, pose_x, pose_y)"
#~ msgstr ""

#~ msgid ""
#~ "point_o = [-0.1, -0.1, 0.1] point_x "
#~ "= [-0.2, -0.1, 0.1] point_y = "
#~ "[-0.1, -0.2, 0.1]"
#~ msgstr ""

#~ msgid ""
#~ "robot.frames.save_dynamic_frame_from_points(\"name\", \"une "
#~ "description test\", point_o, point_x, point_y)"
#~ msgstr ""

#~ msgid ""
#~ "robot.frames.edit_dynamic_frame(\"name\", \"new_name\", "
#~ "\"new description\")"
#~ msgstr ""

#~ msgid "robot.frames.delete_saved_dynamic_frame(\"name\")"
#~ msgstr ""

#~ msgid ""
#~ "robot.frames.move_relative(\"default_frame\", [0.05, 0.05,"
#~ " 0.05, 0.3, 0, 0])"
#~ msgstr ""

#~ msgid ""
#~ "robot.frames.move_linear_relative(\"default_frame\", [0.05, "
#~ "0.05, 0.05, 0.3, 0, 0])"
#~ msgstr ""

#~ msgid ""
#~ ":param frame_name : name of local "
#~ "frame :type frame_name: str :param "
#~ "offset: list which contains offset of"
#~ " x, y, z, roll, pitch, yaw "
#~ ":type offset: list[float] :return: status, "
#~ "message :rtype: (int, str)"
#~ msgstr ""

#~ msgid "pose of a frame"
#~ msgstr ""

#~ msgid "camera intrinsics, distortions coefficientspose_origin"
#~ msgstr ""

