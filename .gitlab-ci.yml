variables:

  ########### Part that needs to be overwrite for each documentation ###########

  # Documentation name
  DOCUMENTATION_NAME: pyniryo
  # OVH's folder where the documentation will be stored
  TARGET_FOLDER_OVH: ~/docs/dev

  BASE_FOLDER_DOC_URL: https://docs.niryo.com/dev

  ##############################################################################

  # Allow to pull the directory containing front-end files
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_STRATEGY: fetch
  GIT_DEPTH: 0

stages:
  - build
  - upload
  - release_gitlab

build_job:
  image: registry.gitlab.com/niryo/dockers/build_docs/pyniryo:v1.0.4
  rules:
  #   ## Just in case we would restrict to master (https://stackoverflow.com/a/64448994)
  #   # If a it's a tag && protected tag
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"

  stage: build
  script:
    # Build documentation without todo printing in final document
    - docs/scripts/build_docs.sh -D todo_include_todos=0 -o "$CI_COMMIT_TAG"
    # Generate pdf
    - docs/scripts/generate_pdf.sh -o $CI_COMMIT_TAG/generated_pdfs
    - mv docs/$CI_COMMIT_TAG $CI_COMMIT_TAG
  artifacts:
    paths:
      - $CI_COMMIT_TAG

upload_job:
  image: registry.gitlab.com/niryo/dockers/build_docs/base:latest
  rules:
    ## Just in case we would restrict to master (https://stackoverflow.com/a/64448994)
    # If a it's a tag && protected tag
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"

## Need to update versions.json

  stage: upload
  retry:
    max: 2
  dependencies:
    - build_job
  needs:
    - build_job
  script:
    - apt update
    # Install jq (json CLI for bash) + LFTP
    - apt install -y --no-install-recommends jq wget lftp
    # Bash script that creates a versions.json file locally (it adds versions to existing file)
    - ./.gitlab_resources/setup_versions_file.bash ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME} $CI_COMMIT_TAG
    # Create .htaccess that will redirects from "X/index.html" to "X/last_version/en/index.html"
    - |
      echo \
      "RewriteEngine on
      # Redirect index.html with lang fr to last version in fr
      RewriteCond %{QUERY_STRING} ^lang=fr$
      RewriteRule ^index.html$ ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME}/$CI_COMMIT_TAG/fr/index.html [R=301,NC]

      # Redirect index.html to last version
      RewriteCond %{QUERY_STRING} ^$
      RewriteRule ^index.html$ ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME}/$CI_COMMIT_TAG/en/index.html [R=301,NC]

      ErrorDocument 403 ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME}/$CI_COMMIT_TAG/en/index.html

      # Disable directory listing when accessing directy folder web address
      Options -Indexes
      " > .htaccess_last_version_default_language
    - mkdir -p source
    # Create .htaccess that will redirects from "X/source/index.html" to "X/last_version/en/index.html"
    - |
      echo \
      "RewriteEngine on
      # Redirect everything after the "source/" to the proper latest link
      RewriteRule ^(.+)$ ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME}/$CI_COMMIT_TAG/en/source/\$1 [R=301,NC]
      # Disable directory listing when accessing directy folder web address
      Options -Indexes
      " > .htaccess_old_url_to_default_language
    # Deploy new doc through LFPT
    - lftp -u ${FTP_USERNAME},${FTP_PASSWORD} ${FTP_URL} << EOF
    # Send to root folder for this documentation
    - cd ${TARGET_FOLDER_OVH}/${DOCUMENTATION_NAME} || exit 1
    # Send whole folder for this new version
    - mirror -c -R $CI_COMMIT_TAG
    # Send updated versions json file
    - put versions.json
    # Send the default redirecting to en language
    - put .htaccess_last_version_default_language -o .htaccess
    # Create source folder if it doesn't exists
    - mkdir -f source
    # Send "dummy" folder that redirects (htaccess) to new url with language
    - put -O source .htaccess_old_url_to_default_language -o .htaccess
    # Quit lftp
    - quit
    # EOF because it's in stdin 'input' mode
    - EOF

release_gitlab_job:
  rules:
    ## Just in case we would restrict to master (https://stackoverflow.com/a/64448994)
    # If a it's a tag && protected tag
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"

  image: registry.gitlab.com/gitlab-org/release-cli:v0.8.0
  needs:
    - build_job
  stage: release_gitlab
  retry:
    max: 2
  script:
    - release-cli create  --name="Release $CI_COMMIT_TAG" --description="Release created automatically by Gitlab pipeline at $CI_PIPELINE_URL" --tag-name=$CI_COMMIT_TAG

